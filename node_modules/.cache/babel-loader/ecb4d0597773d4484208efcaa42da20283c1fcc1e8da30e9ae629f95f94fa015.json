{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport GoTrueAdminApi from './GoTrueAdminApi';\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants';\nimport { AuthImplicitGrantRedirectError, AuthInvalidCredentialsError, AuthRetryableFetchError, AuthSessionMissingError, AuthUnknownError, isAuthApiError, isAuthError } from './lib/errors';\nimport { _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch';\nimport { decodeJWTPayload, Deferred, getItemAsync, getParameterByName, isBrowser, removeItemAsync, resolveFetch, setItemAsync, uuid, retryable, sleep } from './lib/helpers';\nimport localStorageAdapter from './lib/local-storage';\nimport { polyfillGlobalThis } from './lib/polyfills';\npolyfillGlobalThis(); // Make \"globalThis\" available\nconst DEFAULT_OPTIONS = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS\n};\n/** Current session will be checked for refresh at this interval. */\nconst AUTO_REFRESH_TICK_DURATION = 10 * 1000;\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\nconst AUTO_REFRESH_TICK_THRESHOLD = 3;\nexport default class GoTrueClient {\n  /**\n   * Create a new client for use in the browser.\n   */\n  constructor(options) {\n    var _a;\n    this.stateChangeEmitters = new Map();\n    this.autoRefreshTicker = null;\n    this.visibilityChangedCallback = null;\n    this.refreshingDeferred = null;\n    /**\n     * Keeps track of the async client initialization.\n     * When null or not yet resolved the auth state is `unknown`\n     * Once resolved the the auth state is known and it's save to call any further client methods.\n     * Keep extra care to never reject or throw uncaught errors\n     */\n    this.initializePromise = null;\n    this.detectSessionInUrl = true;\n    /**\n     * Used to broadcast state change events to other tabs listening.\n     */\n    this.broadcastChannel = null;\n    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.inMemorySession = null;\n    this.storageKey = settings.storageKey;\n    this.autoRefreshToken = settings.autoRefreshToken;\n    this.persistSession = settings.persistSession;\n    this.storage = settings.storage || localStorageAdapter;\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch\n    });\n    this.url = settings.url;\n    this.headers = settings.headers;\n    this.fetch = resolveFetch(settings.fetch);\n    this.detectSessionInUrl = settings.detectSessionInUrl;\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)\n    };\n    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n      try {\n        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);\n      } catch (e) {\n        console.error('Failed to create a new BroadcastChannel, multi-tab state changes will not be available', e);\n      }\n      (_a = this.broadcastChannel) === null || _a === void 0 ? void 0 : _a.addEventListener('message', event => {\n        this._notifyAllSubscribers(event.data.event, event.data.session, false); // broadcast = false so we don't get an endless loop of messages\n      });\n    }\n\n    this.initialize();\n  }\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n  initialize() {\n    if (!this.initializePromise) {\n      this.initializePromise = this._initialize();\n    }\n    return this.initializePromise;\n  }\n  /**\n   * IMPORTANT:\n   * 1. Never throw in this method, as it is called from the constructor\n   * 2. Never return a session from this method as it would be cached over\n   *    the whole lifetime of the client\n   */\n  _initialize() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.initializePromise) {\n        return this.initializePromise;\n      }\n      try {\n        if (this.detectSessionInUrl && this._isImplicitGrantFlow()) {\n          const {\n            data,\n            error\n          } = yield this._getSessionFromUrl();\n          if (error) {\n            // failed login attempt via url,\n            // remove old session as in verifyOtp, signUp and signInWith*\n            yield this._removeSession();\n            return {\n              error\n            };\n          }\n          const {\n            session,\n            redirectType\n          } = data;\n          yield this._saveSession(session);\n          setTimeout(() => {\n            this._notifyAllSubscribers('SIGNED_IN', session);\n            if (redirectType === 'recovery') {\n              this._notifyAllSubscribers('PASSWORD_RECOVERY', session);\n            }\n          }, 0);\n          return {\n            error: null\n          };\n        }\n        // no login attempt via callback url try to recover session from storage\n        yield this._recoverAndRefresh();\n        return {\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            error\n          };\n        }\n        return {\n          error: new AuthUnknownError('Unexpected error during initialization', error)\n        };\n      } finally {\n        yield this._handleVisibilityChange();\n      }\n    });\n  }\n  /**\n   * Creates a new user.\n   *\n   * Be aware that if a user account exists in the system you may get back an\n   * error message that attempts to hide this information from the user.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  signUp(credentials) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        let res;\n        if ('email' in credentials) {\n          const {\n            email,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/signup`, {\n            headers: this.headers,\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n            body: {\n              email,\n              password,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/signup`, {\n            headers: this.headers,\n            body: {\n              phone,\n              password,\n              data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else {\n          throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n        }\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: error\n          };\n        }\n        const session = data.session;\n        const user = data.user;\n        if (data.session) {\n          yield this._saveSession(data.session);\n          this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in an existing user with an email and password or phone and password.\n   *\n   * Be aware that you may get back an error message that will not distingish\n   * between the cases where the account does not exist or that the\n   * email/phone and password combination is wrong or that the account can only\n   * be accessed via social login. Do note that you will need\n   * to configure a Whatsapp sender on Twilio if you are using phone sign in\n   * with 'whatsapp'. The whatsapp channel is not supported on other providers\n   * at this time.\n   */\n  signInWithPassword(credentials) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        let res;\n        if ('email' in credentials) {\n          const {\n            email,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n            headers: this.headers,\n            body: {\n              email,\n              password,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n            headers: this.headers,\n            body: {\n              phone,\n              password,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              },\n              channel: (_a = options === null || options === void 0 ? void 0 : options.channel) !== null && _a !== void 0 ? _a : 'sms'\n            },\n            xform: _sessionResponse\n          });\n        } else {\n          throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n        }\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) return {\n          data: {\n            user: null,\n            session: null\n          },\n          error\n        };\n        if (data.session) {\n          yield this._saveSession(data.session);\n          this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data,\n          error\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in an existing user via a third-party provider.\n   */\n  signInWithOAuth(credentials) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._removeSession();\n      return this._handleProviderSignIn(credentials.provider, {\n        redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n        scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n        queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\n        skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect\n      });\n    });\n  }\n  /**\n   * Allows signing in with an ID token issued by certain supported providers.\n   * The ID token is verified for validity and a new session is established.\n   *\n   * @experimental\n   */\n  signInWithIdToken(credentials) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._removeSession();\n      try {\n        const {\n          options,\n          provider,\n          token,\n          nonce\n        } = credentials;\n        const res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n          headers: this.headers,\n          body: {\n            provider,\n            id_token: token,\n            nonce,\n            gotrue_meta_security: {\n              captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n            }\n          },\n          xform: _sessionResponse\n        });\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) return {\n          data: {\n            user: null,\n            session: null\n          },\n          error\n        };\n        if (data.session) {\n          yield this._saveSession(data.session);\n          this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data,\n          error\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in a user using magiclink or a one-time password (OTP).\n   *\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or, that the account\n   * can only be accessed via social login.\n   *\n   * Do note that you will need to configure a Whatsapp sender on Twilio\n   * if you are using phone sign in with the 'whatsapp' channel. The whatsapp\n   * channel is not supported on other providers\n   * at this time.\n   */\n  signInWithOtp(credentials) {\n    var _a, _b, _c, _d, _e;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        if ('email' in credentials) {\n          const {\n            email,\n            options\n          } = credentials;\n          const {\n            error\n          } = yield _request(this.fetch, 'POST', `${this.url}/otp`, {\n            headers: this.headers,\n            body: {\n              email,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        if ('phone' in credentials) {\n          const {\n            phone,\n            options\n          } = credentials;\n          const {\n            error\n          } = yield _request(this.fetch, 'POST', `${this.url}/otp`, {\n            headers: this.headers,\n            body: {\n              phone,\n              data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},\n              create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              },\n              channel: (_e = options === null || options === void 0 ? void 0 : options.channel) !== null && _e !== void 0 ? _e : 'sms'\n            }\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw new AuthInvalidCredentialsError('You must provide either an email or phone number.');\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   */\n  verifyOtp(params) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        const {\n          data,\n          error\n        } = yield _request(this.fetch, 'POST', `${this.url}/verify`, {\n          headers: this.headers,\n          body: Object.assign(Object.assign({}, params), {\n            gotrue_meta_security: {\n              captcha_token: (_a = params.options) === null || _a === void 0 ? void 0 : _a.captchaToken\n            }\n          }),\n          redirectTo: (_b = params.options) === null || _b === void 0 ? void 0 : _b.redirectTo,\n          xform: _sessionResponse\n        });\n        if (error) {\n          throw error;\n        }\n        if (!data) {\n          throw 'An error occurred on token verification.';\n        }\n        const session = data.session;\n        const user = data.user;\n        if (session === null || session === void 0 ? void 0 : session.access_token) {\n          yield this._saveSession(session);\n          this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Attempts a single-sign on using an enterprise Identity Provider. A\n   * successful SSO attempt will redirect the current page to the identity\n   * provider authorization page. The redirect URL is implementation and SSO\n   * protocol specific.\n   *\n   * You can use it by providing a SSO domain. Typically you can extract this\n   * domain by asking users for their email address. If this domain is\n   * registered on the Auth instance the redirect will use that organization's\n   * currently active SSO Identity Provider for the login.\n   *\n   * If you have built an organization-specific login page, you can use the\n   * organization's SSO Identity Provider UUID directly instead.\n   *\n   * This API is experimental and availability is conditional on correct\n   * settings on the Auth service.\n   *\n   * @experimental\n   */\n  signInWithSSO(params) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        return yield _request(this.fetch, 'POST', `${this.url}/sso`, {\n          body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, 'providerId' in params ? {\n            provider_id: params.providerId\n          } : null), 'domain' in params ? {\n            domain: params.domain\n          } : null), {\n            redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : undefined\n          }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? {\n            gotrue_meta_security: {\n              captcha_token: params.options.captchaToken\n            }\n          } : null), {\n            skip_http_redirect: true\n          }),\n          headers: this.headers,\n          xform: _ssoResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Returns the session, refreshing it if necessary.\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n   */\n  getSession() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // make sure we've read the session from the url if there is one\n      // save to just await, as long we make sure _initialize() never throws\n      yield this.initializePromise;\n      let currentSession = null;\n      if (this.persistSession) {\n        const maybeSession = yield getItemAsync(this.storage, this.storageKey);\n        if (maybeSession !== null) {\n          if (this._isValidSession(maybeSession)) {\n            currentSession = maybeSession;\n          } else {\n            yield this._removeSession();\n          }\n        }\n      } else {\n        currentSession = this.inMemorySession;\n      }\n      if (!currentSession) {\n        return {\n          data: {\n            session: null\n          },\n          error: null\n        };\n      }\n      const hasExpired = currentSession.expires_at ? currentSession.expires_at <= Date.now() / 1000 : false;\n      if (!hasExpired) {\n        return {\n          data: {\n            session: currentSession\n          },\n          error: null\n        };\n      }\n      const {\n        session,\n        error\n      } = yield this._callRefreshToken(currentSession.refresh_token);\n      if (error) {\n        return {\n          data: {\n            session: null\n          },\n          error\n        };\n      }\n      return {\n        data: {\n          session\n        },\n        error: null\n      };\n    });\n  }\n  /**\n   * Gets the current user details if there is an existing session.\n   * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n   */\n  getUser(jwt) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!jwt) {\n          const {\n            data,\n            error\n          } = yield this.getSession();\n          if (error) {\n            throw error;\n          }\n          // Default to Authorization header if there is no existing session\n          jwt = (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n        }\n        return yield _request(this.fetch, 'GET', `${this.url}/user`, {\n          headers: this.headers,\n          jwt: jwt,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Updates user data for a logged in user.\n   */\n  updateUser(attributes) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n        if (sessionError) {\n          throw sessionError;\n        }\n        if (!sessionData.session) {\n          throw new AuthSessionMissingError();\n        }\n        const session = sessionData.session;\n        const {\n          data,\n          error: userError\n        } = yield _request(this.fetch, 'PUT', `${this.url}/user`, {\n          headers: this.headers,\n          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n          body: attributes,\n          jwt: session.access_token,\n          xform: _userResponse\n        });\n        if (userError) throw userError;\n        session.user = data.user;\n        yield this._saveSession(session);\n        this._notifyAllSubscribers('USER_UPDATED', session);\n        return {\n          data: {\n            user: session.user\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Decodes a JWT (without performing any validation).\n   */\n  _decodeJWT(jwt) {\n    return decodeJWTPayload(jwt);\n  }\n  /**\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\n   * @param currentSession The current session that minimally contains an access token and refresh token.\n   */\n  setSession(currentSession) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!currentSession.access_token || !currentSession.refresh_token) {\n          throw new AuthSessionMissingError();\n        }\n        const timeNow = Date.now() / 1000;\n        let expiresAt = timeNow;\n        let hasExpired = true;\n        let session = null;\n        const payload = decodeJWTPayload(currentSession.access_token);\n        if (payload.exp) {\n          expiresAt = payload.exp;\n          hasExpired = expiresAt <= timeNow;\n        }\n        if (hasExpired) {\n          const {\n            session: refreshedSession,\n            error\n          } = yield this._callRefreshToken(currentSession.refresh_token);\n          if (error) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: error\n            };\n          }\n          if (!refreshedSession) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: null\n            };\n          }\n          session = refreshedSession;\n        } else {\n          const {\n            data,\n            error\n          } = yield this.getUser(currentSession.access_token);\n          if (error) {\n            throw error;\n          }\n          session = {\n            access_token: currentSession.access_token,\n            refresh_token: currentSession.refresh_token,\n            user: data.user,\n            token_type: 'bearer',\n            expires_in: expiresAt - timeNow,\n            expires_at: expiresAt\n          };\n          yield this._saveSession(session);\n          this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user: session.user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              session: null,\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Returns a new session, regardless of expiry status.\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n   * If the current session's refresh token is invalid, an error will be thrown.\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\n   */\n  refreshSession(currentSession) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!currentSession) {\n          const {\n            data,\n            error\n          } = yield this.getSession();\n          if (error) {\n            throw error;\n          }\n          currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;\n        }\n        if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {\n          throw new AuthSessionMissingError();\n        }\n        const {\n          session,\n          error\n        } = yield this._callRefreshToken(currentSession.refresh_token);\n        if (error) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: error\n          };\n        }\n        if (!session) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: null\n          };\n        }\n        return {\n          data: {\n            user: session.user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Gets the session data from a URL string\n   */\n  _getSessionFromUrl() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.');\n        if (!this._isImplicitGrantFlow()) {\n          throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.');\n        }\n        const error_description = getParameterByName('error_description');\n        if (error_description) {\n          const error_code = getParameterByName('error_code');\n          if (!error_code) throw new AuthImplicitGrantRedirectError('No error_code detected.');\n          const error = getParameterByName('error');\n          if (!error) throw new AuthImplicitGrantRedirectError('No error detected.');\n          throw new AuthImplicitGrantRedirectError(error_description, {\n            error,\n            code: error_code\n          });\n        }\n        const provider_token = getParameterByName('provider_token');\n        const provider_refresh_token = getParameterByName('provider_refresh_token');\n        const access_token = getParameterByName('access_token');\n        if (!access_token) throw new AuthImplicitGrantRedirectError('No access_token detected.');\n        const expires_in = getParameterByName('expires_in');\n        if (!expires_in) throw new AuthImplicitGrantRedirectError('No expires_in detected.');\n        const refresh_token = getParameterByName('refresh_token');\n        if (!refresh_token) throw new AuthImplicitGrantRedirectError('No refresh_token detected.');\n        const token_type = getParameterByName('token_type');\n        if (!token_type) throw new AuthImplicitGrantRedirectError('No token_type detected.');\n        const timeNow = Math.round(Date.now() / 1000);\n        const expires_at = timeNow + parseInt(expires_in);\n        const {\n          data,\n          error\n        } = yield this.getUser(access_token);\n        if (error) throw error;\n        const user = data.user;\n        const session = {\n          provider_token,\n          provider_refresh_token,\n          access_token,\n          expires_in: parseInt(expires_in),\n          expires_at,\n          refresh_token,\n          token_type,\n          user\n        };\n        const redirectType = getParameterByName('type');\n        // Remove tokens from URL\n        window.location.hash = '';\n        return {\n          data: {\n            session,\n            redirectType\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              session: null,\n              redirectType: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n   */\n  _isImplicitGrantFlow() {\n    return isBrowser() && (Boolean(getParameterByName('access_token')) || Boolean(getParameterByName('error_description')));\n  }\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n   */\n  signOut() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data,\n        error: sessionError\n      } = yield this.getSession();\n      if (sessionError) {\n        return {\n          error: sessionError\n        };\n      }\n      const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;\n      if (accessToken) {\n        const {\n          error\n        } = yield this.admin.signOut(accessToken);\n        if (error) {\n          // ignore 404s since user might not exist anymore\n          // ignore 401s since an invalid or expired JWT should sign out the current session\n          if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n            return {\n              error\n            };\n          }\n        }\n      }\n      yield this._removeSession();\n      this._notifyAllSubscribers('SIGNED_OUT', null);\n      return {\n        error: null\n      };\n    });\n  }\n  /**\n   * Receive a notification every time an auth event happens.\n   * @param callback A callback function to be invoked when an auth event happens.\n   */\n  onAuthStateChange(callback) {\n    const id = uuid();\n    const subscription = {\n      id,\n      callback,\n      unsubscribe: () => {\n        this.stateChangeEmitters.delete(id);\n      }\n    };\n    this.stateChangeEmitters.set(id, subscription);\n    this.emitInitialSession(id);\n    return {\n      data: {\n        subscription\n      }\n    };\n  }\n  emitInitialSession(id) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: {\n            session\n          },\n          error\n        } = yield this.getSession();\n        if (error) throw error;\n        (_a = this.stateChangeEmitters.get(id)) === null || _a === void 0 ? void 0 : _a.callback('INITIAL_SESSION', session);\n      } catch (err) {\n        (_b = this.stateChangeEmitters.get(id)) === null || _b === void 0 ? void 0 : _b.callback('INITIAL_SESSION', null);\n        console.error(err);\n      }\n    });\n  }\n  /**\n   * Sends a password reset request to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n   */\n  resetPasswordForEmail(email) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'POST', `${this.url}/recover`, {\n          body: {\n            email,\n            gotrue_meta_security: {\n              captcha_token: options.captchaToken\n            }\n          },\n          headers: this.headers,\n          redirectTo: options.redirectTo\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  _refreshAccessToken(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const startedAt = Date.now();\n        // will attempt to refresh the token with exponential backoff\n        return yield retryable(attempt => __awaiter(this, void 0, void 0, function* () {\n          yield sleep(attempt * 200); // 0, 200, 400, 800, ...\n          return yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n            body: {\n              refresh_token: refreshToken\n            },\n            headers: this.headers,\n            xform: _sessionResponse\n          });\n        }), (attempt, _, result) => result && result.error && result.error instanceof AuthRetryableFetchError &&\n        // retryable only if the request can be sent before the backoff overflows the tick duration\n        Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION);\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              session: null,\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  _isValidSession(maybeSession) {\n    const isValidSession = typeof maybeSession === 'object' && maybeSession !== null && 'access_token' in maybeSession && 'refresh_token' in maybeSession && 'expires_at' in maybeSession;\n    return isValidSession;\n  }\n  _handleProviderSignIn(provider) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const url = this._getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams\n    });\n    // try to open on the browser\n    if (isBrowser() && !options.skipBrowserRedirect) {\n      window.location.assign(url);\n    }\n    return {\n      data: {\n        provider,\n        url\n      },\n      error: null\n    };\n  }\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  _recoverAndRefresh() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const currentSession = yield getItemAsync(this.storage, this.storageKey);\n        if (!this._isValidSession(currentSession)) {\n          if (currentSession !== null) {\n            yield this._removeSession();\n          }\n          return;\n        }\n        const timeNow = Math.round(Date.now() / 1000);\n        if (((_a = currentSession.expires_at) !== null && _a !== void 0 ? _a : Infinity) < timeNow + EXPIRY_MARGIN) {\n          if (this.autoRefreshToken && currentSession.refresh_token) {\n            const {\n              error\n            } = yield this._callRefreshToken(currentSession.refresh_token);\n            if (error) {\n              console.log(error.message);\n              yield this._removeSession();\n            }\n          } else {\n            yield this._removeSession();\n          }\n        } else {\n          if (this.persistSession) {\n            yield this._saveSession(currentSession);\n          }\n          this._notifyAllSubscribers('SIGNED_IN', currentSession);\n        }\n      } catch (err) {\n        console.error(err);\n        return;\n      }\n    });\n  }\n  _callRefreshToken(refreshToken) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      // refreshing is already in progress\n      if (this.refreshingDeferred) {\n        return this.refreshingDeferred.promise;\n      }\n      try {\n        this.refreshingDeferred = new Deferred();\n        if (!refreshToken) {\n          throw new AuthSessionMissingError();\n        }\n        const {\n          data,\n          error\n        } = yield this._refreshAccessToken(refreshToken);\n        if (error) throw error;\n        if (!data.session) throw new AuthSessionMissingError();\n        yield this._saveSession(data.session);\n        this._notifyAllSubscribers('TOKEN_REFRESHED', data.session);\n        const result = {\n          session: data.session,\n          error: null\n        };\n        this.refreshingDeferred.resolve(result);\n        return result;\n      } catch (error) {\n        if (isAuthError(error)) {\n          const result = {\n            session: null,\n            error\n          };\n          (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);\n          return result;\n        }\n        (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);\n        throw error;\n      } finally {\n        this.refreshingDeferred = null;\n      }\n    });\n  }\n  _notifyAllSubscribers(event, session) {\n    let broadcast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (this.broadcastChannel && broadcast) {\n      this.broadcastChannel.postMessage({\n        event,\n        session\n      });\n    }\n    this.stateChangeEmitters.forEach(x => x.callback(event, session));\n  }\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  _saveSession(session) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.persistSession) {\n        this.inMemorySession = session;\n      }\n      if (this.persistSession && session.expires_at) {\n        yield this._persistSession(session);\n      }\n    });\n  }\n  _persistSession(currentSession) {\n    return setItemAsync(this.storage, this.storageKey, currentSession);\n  }\n  _removeSession() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.persistSession) {\n        yield removeItemAsync(this.storage, this.storageKey);\n      } else {\n        this.inMemorySession = null;\n      }\n    });\n  }\n  /**\n   * Removes any registered visibilitychange callback.\n   *\n   * {@see #startAutoRefresh}\n   * {@see #stopAutoRefresh}\n   */\n  _removeVisibilityChangedCallback() {\n    const callback = this.visibilityChangedCallback;\n    this.visibilityChangedCallback = null;\n    try {\n      if (callback && isBrowser() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {\n        window.removeEventListener('visibilitychange', callback);\n      }\n    } catch (e) {\n      console.error('removing visibilitychange callback failed', e);\n    }\n  }\n  /**\n   * This is the private implementation of {@link #startAutoRefresh}. Use this\n   * within the library.\n   */\n  _startAutoRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._stopAutoRefresh();\n      const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION);\n      this.autoRefreshTicker = ticker;\n      if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n        // ticker is a NodeJS Timeout object that has an `unref` method\n        // https://nodejs.org/api/timers.html#timeoutunref\n        // When auto refresh is used in NodeJS (like for testing) the\n        // `setInterval` is preventing the process from being marked as\n        // finished and tests run endlessly. This can be prevented by calling\n        // `unref()` on the returned object.\n        ticker.unref();\n      }\n      // run the tick immediately\n      yield this._autoRefreshTokenTick();\n    });\n  }\n  /**\n   * This is the private implementation of {@link #stopAutoRefresh}. Use this\n   * within the library.\n   */\n  _stopAutoRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const ticker = this.autoRefreshTicker;\n      this.autoRefreshTicker = null;\n      if (ticker) {\n        clearInterval(ticker);\n      }\n    });\n  }\n  /**\n   * Starts an auto-refresh process in the background. The session is checked\n   * every few seconds. Close to the time of expiration a process is started to\n   * refresh the session. If refreshing fails it will be retried for as long as\n   * necessary.\n   *\n   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n   * to call this function, it will be called for you.\n   *\n   * On browsers the refresh process works only when the tab/window is in the\n   * foreground to conserve resources as well as prevent race conditions and\n   * flooding auth with requests. If you call this method any managed\n   * visibility change callback will be removed and you must manage visibility\n   * changes on your own.\n   *\n   * On non-browser platforms the refresh process works *continuously* in the\n   * background, which may not be desireable. You should hook into your\n   * platform's foreground indication mechanism and call these methods\n   * appropriately to conserve resources.\n   *\n   * {@see #stopAutoRefresh}\n   */\n  startAutoRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._removeVisibilityChangedCallback();\n      yield this._startAutoRefresh();\n    });\n  }\n  /**\n   * Stops an active auto refresh process running in the background (if any).\n   *\n   * If you call this method any managed visibility change callback will be\n   * removed and you must manage visibility changes on your own.\n   *\n   * See {@link #startAutoRefresh} for more details.\n   */\n  stopAutoRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._removeVisibilityChangedCallback();\n      yield this._stopAutoRefresh();\n    });\n  }\n  /**\n   * Runs the auto refresh token tick.\n   */\n  _autoRefreshTokenTick() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const now = Date.now();\n      try {\n        const {\n          data: {\n            session\n          }\n        } = yield this.getSession();\n        if (!session || !session.refresh_token || !session.expires_at) {\n          return;\n        }\n        // session will expire in this many ticks (or has already expired if <= 0)\n        const expiresInTicks = Math.floor((session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION);\n        if (expiresInTicks < AUTO_REFRESH_TICK_THRESHOLD) {\n          yield this._callRefreshToken(session.refresh_token);\n        }\n      } catch (e) {\n        console.error('Auto refresh tick failed with error. This is likely a transient error.', e);\n      }\n    });\n  }\n  /**\n   * Registers callbacks on the browser / platform, which in-turn run\n   * algorithms when the browser window/tab are in foreground. On non-browser\n   * platforms it assumes always foreground.\n   */\n  _handleVisibilityChange() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n        if (this.autoRefreshToken) {\n          // in non-browser environments the refresh token ticker runs always\n          this.startAutoRefresh();\n        }\n        return false;\n      }\n      try {\n        this.visibilityChangedCallback = () => __awaiter(this, void 0, void 0, function* () {\n          return yield this._onVisibilityChanged(false);\n        });\n        window === null || window === void 0 ? void 0 : window.addEventListener('visibilitychange', this.visibilityChangedCallback);\n        // now immediately call the visbility changed callback to setup with the\n        // current visbility state\n        yield this._onVisibilityChanged(true); // initial call\n      } catch (error) {\n        console.error('_handleVisibilityChange', error);\n      }\n    });\n  }\n  /**\n   * Callback registered with `window.addEventListener('visibilitychange')`.\n   */\n  _onVisibilityChanged(isInitial) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (document.visibilityState === 'visible') {\n        if (!isInitial) {\n          // initial visibility change setup is handled in another flow under #initialize()\n          yield this.initializePromise;\n          yield this._recoverAndRefresh();\n        }\n        if (this.autoRefreshToken) {\n          // in browser environments the refresh token ticker runs only on focused tabs\n          // which prevents race conditions\n          this._startAutoRefresh();\n        }\n      } else if (document.visibilityState === 'hidden') {\n        if (this.autoRefreshToken) {\n          this._stopAutoRefresh();\n        }\n      }\n    });\n  }\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n   */\n  _getUrlForProvider(provider, options) {\n    const urlParams = [`provider=${encodeURIComponent(provider)}`];\n    if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);\n    }\n    if (options === null || options === void 0 ? void 0 : options.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);\n    }\n    if (options === null || options === void 0 ? void 0 : options.queryParams) {\n      const query = new URLSearchParams(options.queryParams);\n      urlParams.push(query.toString());\n    }\n    return `${this.url}/authorize?${urlParams.join('&')}`;\n  }\n  _unenroll(params) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n        return yield _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#enroll}\n   */\n  _enroll(params) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n        const {\n          data,\n          error\n        } = yield _request(this.fetch, 'POST', `${this.url}/factors`, {\n          body: {\n            friendly_name: params.friendlyName,\n            factor_type: params.factorType,\n            issuer: params.issuer\n          },\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n        if (error) {\n          return {\n            data: null,\n            error\n          };\n        }\n        if ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code) {\n          data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;\n        }\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#verify}\n   */\n  _verify(params) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n        const {\n          data,\n          error\n        } = yield _request(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/verify`, {\n          body: {\n            code: params.code,\n            challenge_id: params.challengeId\n          },\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n        if (error) {\n          return {\n            data: null,\n            error\n          };\n        }\n        yield this._saveSession(Object.assign({\n          expires_at: Math.round(Date.now() / 1000) + data.expires_in\n        }, data));\n        this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data);\n        return {\n          data,\n          error\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#challenge}\n   */\n  _challenge(params) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n        return yield _request(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/challenge`, {\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#challengeAndVerify}\n   */\n  _challengeAndVerify(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data: challengeData,\n        error: challengeError\n      } = yield this._challenge({\n        factorId: params.factorId\n      });\n      if (challengeError) {\n        return {\n          data: null,\n          error: challengeError\n        };\n      }\n      return yield this._verify({\n        factorId: params.factorId,\n        challengeId: challengeData.id,\n        code: params.code\n      });\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#listFactors}\n   */\n  _listFactors() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data: {\n          user\n        },\n        error: userError\n      } = yield this.getUser();\n      if (userError) {\n        return {\n          data: null,\n          error: userError\n        };\n      }\n      const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];\n      const totp = factors.filter(factor => factor.factor_type === 'totp' && factor.status === 'verified');\n      return {\n        data: {\n          all: factors,\n          totp\n        },\n        error: null\n      };\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n   */\n  _getAuthenticatorAssuranceLevel() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data: {\n          session\n        },\n        error: sessionError\n      } = yield this.getSession();\n      if (sessionError) {\n        return {\n          data: null,\n          error: sessionError\n        };\n      }\n      if (!session) {\n        return {\n          data: {\n            currentLevel: null,\n            nextLevel: null,\n            currentAuthenticationMethods: []\n          },\n          error: null\n        };\n      }\n      const payload = this._decodeJWT(session.access_token);\n      let currentLevel = null;\n      if (payload.aal) {\n        currentLevel = payload.aal;\n      }\n      let nextLevel = currentLevel;\n      const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter(factor => factor.status === 'verified')) !== null && _b !== void 0 ? _b : [];\n      if (verifiedFactors.length > 0) {\n        nextLevel = 'aal2';\n      }\n      const currentAuthenticationMethods = payload.amr || [];\n      return {\n        data: {\n          currentLevel,\n          nextLevel,\n          currentAuthenticationMethods\n        },\n        error: null\n      };\n    });\n  }\n}","map":{"version":3,"names":["GoTrueAdminApi","DEFAULT_HEADERS","EXPIRY_MARGIN","GOTRUE_URL","STORAGE_KEY","AuthImplicitGrantRedirectError","AuthInvalidCredentialsError","AuthRetryableFetchError","AuthSessionMissingError","AuthUnknownError","isAuthApiError","isAuthError","_request","_sessionResponse","_userResponse","_ssoResponse","decodeJWTPayload","Deferred","getItemAsync","getParameterByName","isBrowser","removeItemAsync","resolveFetch","setItemAsync","uuid","retryable","sleep","localStorageAdapter","polyfillGlobalThis","DEFAULT_OPTIONS","url","storageKey","autoRefreshToken","persistSession","detectSessionInUrl","headers","AUTO_REFRESH_TICK_DURATION","AUTO_REFRESH_TICK_THRESHOLD","GoTrueClient","constructor","options","stateChangeEmitters","Map","autoRefreshTicker","visibilityChangedCallback","refreshingDeferred","initializePromise","broadcastChannel","settings","Object","assign","inMemorySession","storage","admin","fetch","mfa","verify","_verify","bind","enroll","_enroll","unenroll","_unenroll","challenge","_challenge","listFactors","_listFactors","challengeAndVerify","_challengeAndVerify","getAuthenticatorAssuranceLevel","_getAuthenticatorAssuranceLevel","globalThis","BroadcastChannel","e","console","error","_a","addEventListener","event","_notifyAllSubscribers","data","session","initialize","_initialize","_isImplicitGrantFlow","_getSessionFromUrl","_removeSession","redirectType","_saveSession","setTimeout","_recoverAndRefresh","_handleVisibilityChange","signUp","credentials","res","email","password","redirectTo","emailRedirectTo","body","gotrue_meta_security","captcha_token","captchaToken","xform","phone","_b","user","signInWithPassword","channel","signInWithOAuth","_handleProviderSignIn","provider","scopes","queryParams","_c","skipBrowserRedirect","_d","signInWithIdToken","token","nonce","id_token","signInWithOtp","create_user","shouldCreateUser","_e","verifyOtp","params","access_token","signInWithSSO","provider_id","providerId","domain","redirect_to","undefined","skip_http_redirect","getSession","currentSession","maybeSession","_isValidSession","hasExpired","expires_at","Date","now","_callRefreshToken","refresh_token","getUser","jwt","updateUser","attributes","arguments","length","sessionData","sessionError","userError","_decodeJWT","setSession","timeNow","expiresAt","payload","exp","refreshedSession","token_type","expires_in","refreshSession","error_description","error_code","code","provider_token","provider_refresh_token","Math","round","parseInt","window","location","hash","Boolean","signOut","accessToken","status","onAuthStateChange","callback","id","subscription","unsubscribe","delete","set","emitInitialSession","get","err","resetPasswordForEmail","_refreshAccessToken","refreshToken","startedAt","attempt","__awaiter","_","result","isValidSession","_getUrlForProvider","Infinity","log","message","promise","resolve","reject","broadcast","postMessage","forEach","x","_persistSession","_removeVisibilityChangedCallback","removeEventListener","_startAutoRefresh","_stopAutoRefresh","ticker","setInterval","_autoRefreshTokenTick","unref","clearInterval","startAutoRefresh","stopAutoRefresh","expiresInTicks","floor","_onVisibilityChanged","isInitial","document","visibilityState","urlParams","encodeURIComponent","push","query","URLSearchParams","toString","join","factorId","friendly_name","friendlyName","factor_type","factorType","issuer","totp","qr_code","challenge_id","challengeId","challengeData","challengeError","factors","filter","factor","all","currentLevel","nextLevel","currentAuthenticationMethods","aal","verifiedFactors","amr"],"sources":["/Users/bellaxia/Desktop/today-I-learned/node_modules/@supabase/gotrue-js/src/GoTrueClient.ts"],"sourcesContent":["import GoTrueAdminApi from './GoTrueAdminApi'\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants'\nimport {\n  AuthError,\n  AuthImplicitGrantRedirectError,\n  AuthInvalidCredentialsError,\n  AuthRetryableFetchError,\n  AuthSessionMissingError,\n  AuthUnknownError,\n  isAuthApiError,\n  isAuthError,\n} from './lib/errors'\nimport { Fetch, _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch'\nimport {\n  decodeJWTPayload,\n  Deferred,\n  getItemAsync,\n  getParameterByName,\n  isBrowser,\n  removeItemAsync,\n  resolveFetch,\n  setItemAsync,\n  uuid,\n  retryable,\n  sleep,\n} from './lib/helpers'\nimport localStorageAdapter from './lib/local-storage'\nimport { polyfillGlobalThis } from './lib/polyfills'\nimport type {\n  AuthChangeEvent,\n  AuthResponse,\n  CallRefreshTokenResult,\n  GoTrueClientOptions,\n  InitializeResult,\n  OAuthResponse,\n  SSOResponse,\n  Provider,\n  Session,\n  SignInWithIdTokenCredentials,\n  SignInWithOAuthCredentials,\n  SignInWithPasswordCredentials,\n  SignInWithPasswordlessCredentials,\n  SignUpWithPasswordCredentials,\n  SignInWithSSO,\n  Subscription,\n  SupportedStorage,\n  User,\n  UserAttributes,\n  UserResponse,\n  VerifyOtpParams,\n  GoTrueMFAApi,\n  MFAEnrollParams,\n  AuthMFAEnrollResponse,\n  MFAChallengeParams,\n  AuthMFAChallengeResponse,\n  MFAUnenrollParams,\n  AuthMFAUnenrollResponse,\n  MFAVerifyParams,\n  AuthMFAVerifyResponse,\n  AuthMFAListFactorsResponse,\n  AMREntry,\n  AuthMFAGetAuthenticatorAssuranceLevelResponse,\n  AuthenticatorAssuranceLevels,\n  Factor,\n  MFAChallengeAndVerifyParams,\n} from './lib/types'\n\npolyfillGlobalThis() // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS: Omit<Required<GoTrueClientOptions>, 'fetch' | 'storage'> = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS,\n}\n\n/** Current session will be checked for refresh at this interval. */\nconst AUTO_REFRESH_TICK_DURATION = 10 * 1000\n\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\nconst AUTO_REFRESH_TICK_THRESHOLD = 3\n\nexport default class GoTrueClient {\n  /**\n   * Namespace for the GoTrue admin methods.\n   * These methods should only be used in a trusted server-side environment.\n   */\n  admin: GoTrueAdminApi\n  /**\n   * Namespace for the MFA methods.\n   */\n  mfa: GoTrueMFAApi\n  /**\n   * The storage key used to identify the values saved in localStorage\n   */\n  protected storageKey: string\n\n  /**\n   * The session object for the currently logged in user. If null, it means there isn't a logged-in user.\n   * Only used if persistSession is false.\n   */\n  protected inMemorySession: Session | null\n\n  protected autoRefreshToken: boolean\n  protected persistSession: boolean\n  protected storage: SupportedStorage\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\n  protected autoRefreshTicker: ReturnType<typeof setInterval> | null = null\n  protected visibilityChangedCallback: (() => Promise<any>) | null = null\n  protected refreshingDeferred: Deferred<CallRefreshTokenResult> | null = null\n  /**\n   * Keeps track of the async client initialization.\n   * When null or not yet resolved the auth state is `unknown`\n   * Once resolved the the auth state is known and it's save to call any further client methods.\n   * Keep extra care to never reject or throw uncaught errors\n   */\n  protected initializePromise: Promise<InitializeResult> | null = null\n  protected detectSessionInUrl = true\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  /**\n   * Used to broadcast state change events to other tabs listening.\n   */\n  protected broadcastChannel: BroadcastChannel | null = null\n\n  /**\n   * Create a new client for use in the browser.\n   */\n  constructor(options: GoTrueClientOptions) {\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n    this.inMemorySession = null\n    this.storageKey = settings.storageKey\n    this.autoRefreshToken = settings.autoRefreshToken\n    this.persistSession = settings.persistSession\n    this.storage = settings.storage || localStorageAdapter\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch,\n    })\n\n    this.url = settings.url\n    this.headers = settings.headers\n    this.fetch = resolveFetch(settings.fetch)\n    this.detectSessionInUrl = settings.detectSessionInUrl\n\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\n    }\n\n    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n      try {\n        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey)\n      } catch (e: any) {\n        console.error(\n          'Failed to create a new BroadcastChannel, multi-tab state changes will not be available',\n          e\n        )\n      }\n\n      this.broadcastChannel?.addEventListener('message', (event) => {\n        this._notifyAllSubscribers(event.data.event, event.data.session, false) // broadcast = false so we don't get an endless loop of messages\n      })\n    }\n\n    this.initialize()\n  }\n\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n  initialize(): Promise<InitializeResult> {\n    if (!this.initializePromise) {\n      this.initializePromise = this._initialize()\n    }\n\n    return this.initializePromise\n  }\n\n  /**\n   * IMPORTANT:\n   * 1. Never throw in this method, as it is called from the constructor\n   * 2. Never return a session from this method as it would be cached over\n   *    the whole lifetime of the client\n   */\n  private async _initialize(): Promise<InitializeResult> {\n    if (this.initializePromise) {\n      return this.initializePromise\n    }\n\n    try {\n      if (this.detectSessionInUrl && this._isImplicitGrantFlow()) {\n        const { data, error } = await this._getSessionFromUrl()\n\n        if (error) {\n          // failed login attempt via url,\n          // remove old session as in verifyOtp, signUp and signInWith*\n          await this._removeSession()\n\n          return { error }\n        }\n\n        const { session, redirectType } = data\n\n        await this._saveSession(session)\n\n        setTimeout(() => {\n          this._notifyAllSubscribers('SIGNED_IN', session)\n          if (redirectType === 'recovery') {\n            this._notifyAllSubscribers('PASSWORD_RECOVERY', session)\n          }\n        }, 0)\n\n        return { error: null }\n      }\n\n      // no login attempt via callback url try to recover session from storage\n      await this._recoverAndRefresh()\n      return { error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { error }\n      }\n\n      return {\n        error: new AuthUnknownError('Unexpected error during initialization', error),\n      }\n    } finally {\n      await this._handleVisibilityChange()\n    }\n  }\n\n  /**\n   * Creates a new user.\n   *\n   * Be aware that if a user account exists in the system you may get back an\n   * error message that attempts to hide this information from the user.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  async signUp(credentials: SignUpWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          redirectTo: options?.emailRedirectTo,\n          body: {\n            email,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n\n      const { data, error } = res\n\n      if (error || !data) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      const session: Session | null = data.session\n      const user: User | null = data.user\n\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user with an email and password or phone and password.\n   *\n   * Be aware that you may get back an error message that will not distingish\n   * between the cases where the account does not exist or that the\n   * email/phone and password combination is wrong or that the account can only\n   * be accessed via social login. Do note that you will need\n   * to configure a Whatsapp sender on Twilio if you are using phone sign in\n   * with 'whatsapp'. The whatsapp channel is not supported on other providers\n   * at this time.\n   */\n  async signInWithPassword(credentials: SignInWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            email,\n            password,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            channel: options?.channel ?? 'sms',\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n      const { data, error } = res\n      if (error || !data) return { data: { user: null, session: null }, error }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user via a third-party provider.\n   */\n  async signInWithOAuth(credentials: SignInWithOAuthCredentials): Promise<OAuthResponse> {\n    await this._removeSession()\n    return this._handleProviderSignIn(credentials.provider, {\n      redirectTo: credentials.options?.redirectTo,\n      scopes: credentials.options?.scopes,\n      queryParams: credentials.options?.queryParams,\n      skipBrowserRedirect: credentials.options?.skipBrowserRedirect,\n    })\n  }\n\n  /**\n   * Allows signing in with an ID token issued by certain supported providers.\n   * The ID token is verified for validity and a new session is established.\n   *\n   * @experimental\n   */\n  async signInWithIdToken(credentials: SignInWithIdTokenCredentials): Promise<AuthResponse> {\n    await this._removeSession()\n\n    try {\n      const { options, provider, token, nonce } = credentials\n\n      const res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n        headers: this.headers,\n        body: {\n          provider,\n          id_token: token,\n          nonce,\n          gotrue_meta_security: { captcha_token: options?.captchaToken },\n        },\n        xform: _sessionResponse,\n      })\n\n      const { data, error } = res\n      if (error || !data) return { data: { user: null, session: null }, error }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user using magiclink or a one-time password (OTP).\n   *\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or, that the account\n   * can only be accessed via social login.\n   *\n   * Do note that you will need to configure a Whatsapp sender on Twilio\n   * if you are using phone sign in with the 'whatsapp' channel. The whatsapp\n   * channel is not supported on other providers\n   * at this time.\n   */\n  async signInWithOtp(credentials: SignInWithPasswordlessCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      if ('email' in credentials) {\n        const { email, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            email,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          redirectTo: options?.emailRedirectTo,\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      if ('phone' in credentials) {\n        const { phone, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            phone,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            channel: options?.channel ?? 'sms',\n          },\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      throw new AuthInvalidCredentialsError('You must provide either an email or phone number.')\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   */\n  async verifyOtp(params: VerifyOtpParams): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/verify`, {\n        headers: this.headers,\n        body: {\n          ...params,\n          gotrue_meta_security: { captcha_token: params.options?.captchaToken },\n        },\n        redirectTo: params.options?.redirectTo,\n        xform: _sessionResponse,\n      })\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw 'An error occurred on token verification.'\n      }\n\n      const session: Session | null = data.session\n      const user: User = data.user\n\n      if (session?.access_token) {\n        await this._saveSession(session as Session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Attempts a single-sign on using an enterprise Identity Provider. A\n   * successful SSO attempt will redirect the current page to the identity\n   * provider authorization page. The redirect URL is implementation and SSO\n   * protocol specific.\n   *\n   * You can use it by providing a SSO domain. Typically you can extract this\n   * domain by asking users for their email address. If this domain is\n   * registered on the Auth instance the redirect will use that organization's\n   * currently active SSO Identity Provider for the login.\n   *\n   * If you have built an organization-specific login page, you can use the\n   * organization's SSO Identity Provider UUID directly instead.\n   *\n   * This API is experimental and availability is conditional on correct\n   * settings on the Auth service.\n   *\n   * @experimental\n   */\n  async signInWithSSO(params: SignInWithSSO): Promise<SSOResponse> {\n    try {\n      await this._removeSession()\n\n      return await _request(this.fetch, 'POST', `${this.url}/sso`, {\n        body: {\n          ...('providerId' in params ? { provider_id: params.providerId } : null),\n          ...('domain' in params ? { domain: params.domain } : null),\n          redirect_to: params.options?.redirectTo ?? undefined,\n          ...(params?.options?.captchaToken\n            ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\n            : null),\n          skip_http_redirect: true, // fetch does not handle redirects\n        },\n        headers: this.headers,\n        xform: _ssoResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Returns the session, refreshing it if necessary.\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n   */\n  async getSession(): Promise<\n    | {\n        data: {\n          session: Session\n        }\n        error: null\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: AuthError\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: null\n      }\n  > {\n    // make sure we've read the session from the url if there is one\n    // save to just await, as long we make sure _initialize() never throws\n    await this.initializePromise\n\n    let currentSession: Session | null = null\n\n    if (this.persistSession) {\n      const maybeSession = await getItemAsync(this.storage, this.storageKey)\n\n      if (maybeSession !== null) {\n        if (this._isValidSession(maybeSession)) {\n          currentSession = maybeSession\n        } else {\n          await this._removeSession()\n        }\n      }\n    } else {\n      currentSession = this.inMemorySession\n    }\n\n    if (!currentSession) {\n      return { data: { session: null }, error: null }\n    }\n\n    const hasExpired = currentSession.expires_at\n      ? currentSession.expires_at <= Date.now() / 1000\n      : false\n    if (!hasExpired) {\n      return { data: { session: currentSession }, error: null }\n    }\n\n    const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n    if (error) {\n      return { data: { session: null }, error }\n    }\n\n    return { data: { session }, error: null }\n  }\n\n  /**\n   * Gets the current user details if there is an existing session.\n   * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n   */\n  async getUser(jwt?: string): Promise<UserResponse> {\n    try {\n      if (!jwt) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        // Default to Authorization header if there is no existing session\n        jwt = data.session?.access_token ?? undefined\n      }\n\n      return await _request(this.fetch, 'GET', `${this.url}/user`, {\n        headers: this.headers,\n        jwt: jwt,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates user data for a logged in user.\n   */\n  async updateUser(\n    attributes: UserAttributes,\n    options: {\n      emailRedirectTo?: string | undefined\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        throw sessionError\n      }\n      if (!sessionData.session) {\n        throw new AuthSessionMissingError()\n      }\n      const session: Session = sessionData.session\n      const { data, error: userError } = await _request(this.fetch, 'PUT', `${this.url}/user`, {\n        headers: this.headers,\n        redirectTo: options?.emailRedirectTo,\n        body: attributes,\n        jwt: session.access_token,\n        xform: _userResponse,\n      })\n      if (userError) throw userError\n      session.user = data.user as User\n      await this._saveSession(session)\n      this._notifyAllSubscribers('USER_UPDATED', session)\n\n      return { data: { user: session.user }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Decodes a JWT (without performing any validation).\n   */\n  private _decodeJWT(jwt: string): {\n    exp?: number\n    aal?: AuthenticatorAssuranceLevels | null\n    amr?: AMREntry[] | null\n  } {\n    return decodeJWTPayload(jwt)\n  }\n\n  /**\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\n   * @param currentSession The current session that minimally contains an access token and refresh token.\n   */\n  async setSession(currentSession: {\n    access_token: string\n    refresh_token: string\n  }): Promise<AuthResponse> {\n    try {\n      if (!currentSession.access_token || !currentSession.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const timeNow = Date.now() / 1000\n      let expiresAt = timeNow\n      let hasExpired = true\n      let session: Session | null = null\n      const payload = decodeJWTPayload(currentSession.access_token)\n      if (payload.exp) {\n        expiresAt = payload.exp\n        hasExpired = expiresAt <= timeNow\n      }\n\n      if (hasExpired) {\n        const { session: refreshedSession, error } = await this._callRefreshToken(\n          currentSession.refresh_token\n        )\n        if (error) {\n          return { data: { user: null, session: null }, error: error }\n        }\n\n        if (!refreshedSession) {\n          return { data: { user: null, session: null }, error: null }\n        }\n        session = refreshedSession\n      } else {\n        const { data, error } = await this.getUser(currentSession.access_token)\n        if (error) {\n          throw error\n        }\n        session = {\n          access_token: currentSession.access_token,\n          refresh_token: currentSession.refresh_token,\n          user: data.user,\n          token_type: 'bearer',\n          expires_in: expiresAt - timeNow,\n          expires_at: expiresAt,\n        }\n        await this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Returns a new session, regardless of expiry status.\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n   * If the current session's refresh token is invalid, an error will be thrown.\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\n   */\n  async refreshSession(currentSession?: { refresh_token: string }): Promise<AuthResponse> {\n    try {\n      if (!currentSession) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        currentSession = data.session ?? undefined\n      }\n\n      if (!currentSession?.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n      if (error) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      if (!session) {\n        return { data: { user: null, session: null }, error: null }\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Gets the session data from a URL string\n   */\n  private async _getSessionFromUrl(): Promise<\n    | {\n        data: { session: Session; redirectType: string | null }\n        error: null\n      }\n    | { data: { session: null; redirectType: null }; error: AuthError }\n  > {\n    try {\n      if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.')\n      if (!this._isImplicitGrantFlow()) {\n        throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.')\n      }\n\n      const error_description = getParameterByName('error_description')\n      if (error_description) {\n        const error_code = getParameterByName('error_code')\n        if (!error_code) throw new AuthImplicitGrantRedirectError('No error_code detected.')\n        const error = getParameterByName('error')\n        if (!error) throw new AuthImplicitGrantRedirectError('No error detected.')\n\n        throw new AuthImplicitGrantRedirectError(error_description, { error, code: error_code })\n      }\n\n      const provider_token = getParameterByName('provider_token')\n      const provider_refresh_token = getParameterByName('provider_refresh_token')\n      const access_token = getParameterByName('access_token')\n      if (!access_token) throw new AuthImplicitGrantRedirectError('No access_token detected.')\n      const expires_in = getParameterByName('expires_in')\n      if (!expires_in) throw new AuthImplicitGrantRedirectError('No expires_in detected.')\n      const refresh_token = getParameterByName('refresh_token')\n      if (!refresh_token) throw new AuthImplicitGrantRedirectError('No refresh_token detected.')\n      const token_type = getParameterByName('token_type')\n      if (!token_type) throw new AuthImplicitGrantRedirectError('No token_type detected.')\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expires_at = timeNow + parseInt(expires_in)\n\n      const { data, error } = await this.getUser(access_token)\n      if (error) throw error\n      const user: User = data.user\n      const session: Session = {\n        provider_token,\n        provider_refresh_token,\n        access_token,\n        expires_in: parseInt(expires_in),\n        expires_at,\n        refresh_token,\n        token_type,\n        user,\n      }\n      const redirectType = getParameterByName('type')\n\n      // Remove tokens from URL\n      window.location.hash = ''\n\n      return { data: { session, redirectType }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, redirectType: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n   */\n  private _isImplicitGrantFlow(): boolean {\n    return (\n      isBrowser() &&\n      (Boolean(getParameterByName('access_token')) ||\n        Boolean(getParameterByName('error_description')))\n    )\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n   */\n  async signOut(): Promise<{ error: AuthError | null }> {\n    const { data, error: sessionError } = await this.getSession()\n    if (sessionError) {\n      return { error: sessionError }\n    }\n    const accessToken = data.session?.access_token\n    if (accessToken) {\n      const { error } = await this.admin.signOut(accessToken)\n      if (error) {\n        // ignore 404s since user might not exist anymore\n        // ignore 401s since an invalid or expired JWT should sign out the current session\n        if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n          return { error }\n        }\n      }\n    }\n    await this._removeSession()\n    this._notifyAllSubscribers('SIGNED_OUT', null)\n    return { error: null }\n  }\n\n  /**\n   * Receive a notification every time an auth event happens.\n   * @param callback A callback function to be invoked when an auth event happens.\n   */\n  onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\n    data: { subscription: Subscription }\n  } {\n    const id: string = uuid()\n    const subscription: Subscription = {\n      id,\n      callback,\n      unsubscribe: () => {\n        this.stateChangeEmitters.delete(id)\n      },\n    }\n\n    this.stateChangeEmitters.set(id, subscription)\n\n    this.emitInitialSession(id)\n\n    return { data: { subscription } }\n  }\n\n  private async emitInitialSession(id: string): Promise<void> {\n    try {\n      const {\n        data: { session },\n        error,\n      } = await this.getSession()\n      if (error) throw error\n\n      this.stateChangeEmitters.get(id)?.callback('INITIAL_SESSION', session)\n    } catch (err) {\n      this.stateChangeEmitters.get(id)?.callback('INITIAL_SESSION', null)\n      console.error(err)\n    }\n  }\n\n  /**\n   * Sends a password reset request to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n   */\n  async resetPasswordForEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<\n    | {\n        data: {}\n        error: null\n      }\n    | { data: null; error: AuthError }\n  > {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/recover`, {\n        body: { email, gotrue_meta_security: { captcha_token: options.captchaToken } },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  private async _refreshAccessToken(refreshToken: string): Promise<AuthResponse> {\n    try {\n      const startedAt = Date.now()\n\n      // will attempt to refresh the token with exponential backoff\n      return await retryable(\n        async (attempt) => {\n          await sleep(attempt * 200) // 0, 200, 400, 800, ...\n\n          return await _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n            body: { refresh_token: refreshToken },\n            headers: this.headers,\n            xform: _sessionResponse,\n          })\n        },\n        (attempt, _, result) =>\n          result &&\n          result.error &&\n          result.error instanceof AuthRetryableFetchError &&\n          // retryable only if the request can be sent before the backoff overflows the tick duration\n          Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n      throw error\n    }\n  }\n\n  private _isValidSession(maybeSession: unknown): maybeSession is Session {\n    const isValidSession =\n      typeof maybeSession === 'object' &&\n      maybeSession !== null &&\n      'access_token' in maybeSession &&\n      'refresh_token' in maybeSession &&\n      'expires_at' in maybeSession\n\n    return isValidSession\n  }\n\n  private _handleProviderSignIn(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n      skipBrowserRedirect?: boolean\n    } = {}\n  ) {\n    const url: string = this._getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams,\n    })\n    // try to open on the browser\n    if (isBrowser() && !options.skipBrowserRedirect) {\n      window.location.assign(url)\n    }\n    return { data: { provider, url }, error: null }\n  }\n\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  private async _recoverAndRefresh() {\n    try {\n      const currentSession = await getItemAsync(this.storage, this.storageKey)\n      if (!this._isValidSession(currentSession)) {\n        if (currentSession !== null) {\n          await this._removeSession()\n        }\n\n        return\n      }\n\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if ((currentSession.expires_at ?? Infinity) < timeNow + EXPIRY_MARGIN) {\n        if (this.autoRefreshToken && currentSession.refresh_token) {\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\n\n          if (error) {\n            console.log(error.message)\n            await this._removeSession()\n          }\n        } else {\n          await this._removeSession()\n        }\n      } else {\n        if (this.persistSession) {\n          await this._saveSession(currentSession)\n        }\n        this._notifyAllSubscribers('SIGNED_IN', currentSession)\n      }\n    } catch (err) {\n      console.error(err)\n      return\n    }\n  }\n\n  private async _callRefreshToken(refreshToken: string): Promise<CallRefreshTokenResult> {\n    // refreshing is already in progress\n    if (this.refreshingDeferred) {\n      return this.refreshingDeferred.promise\n    }\n\n    try {\n      this.refreshingDeferred = new Deferred<CallRefreshTokenResult>()\n\n      if (!refreshToken) {\n        throw new AuthSessionMissingError()\n      }\n      const { data, error } = await this._refreshAccessToken(refreshToken)\n      if (error) throw error\n      if (!data.session) throw new AuthSessionMissingError()\n\n      await this._saveSession(data.session)\n      this._notifyAllSubscribers('TOKEN_REFRESHED', data.session)\n\n      const result = { session: data.session, error: null }\n\n      this.refreshingDeferred.resolve(result)\n\n      return result\n    } catch (error) {\n      if (isAuthError(error)) {\n        const result = { session: null, error }\n\n        this.refreshingDeferred?.resolve(result)\n\n        return result\n      }\n\n      this.refreshingDeferred?.reject(error)\n      throw error\n    } finally {\n      this.refreshingDeferred = null\n    }\n  }\n\n  private _notifyAllSubscribers(event: AuthChangeEvent, session: Session | null, broadcast = true) {\n    if (this.broadcastChannel && broadcast) {\n      this.broadcastChannel.postMessage({ event, session })\n    }\n\n    this.stateChangeEmitters.forEach((x) => x.callback(event, session))\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private async _saveSession(session: Session) {\n    if (!this.persistSession) {\n      this.inMemorySession = session\n    }\n\n    if (this.persistSession && session.expires_at) {\n      await this._persistSession(session)\n    }\n  }\n\n  private _persistSession(currentSession: Session) {\n    return setItemAsync(this.storage, this.storageKey, currentSession)\n  }\n\n  private async _removeSession() {\n    if (this.persistSession) {\n      await removeItemAsync(this.storage, this.storageKey)\n    } else {\n      this.inMemorySession = null\n    }\n  }\n\n  /**\n   * Removes any registered visibilitychange callback.\n   *\n   * {@see #startAutoRefresh}\n   * {@see #stopAutoRefresh}\n   */\n  private _removeVisibilityChangedCallback() {\n    const callback = this.visibilityChangedCallback\n    this.visibilityChangedCallback = null\n\n    try {\n      if (callback && isBrowser() && window?.removeEventListener) {\n        window.removeEventListener('visibilitychange', callback)\n      }\n    } catch (e) {\n      console.error('removing visibilitychange callback failed', e)\n    }\n  }\n\n  /**\n   * This is the private implementation of {@link #startAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _startAutoRefresh() {\n    await this._stopAutoRefresh()\n\n    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION)\n    this.autoRefreshTicker = ticker\n\n    if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n      // ticker is a NodeJS Timeout object that has an `unref` method\n      // https://nodejs.org/api/timers.html#timeoutunref\n      // When auto refresh is used in NodeJS (like for testing) the\n      // `setInterval` is preventing the process from being marked as\n      // finished and tests run endlessly. This can be prevented by calling\n      // `unref()` on the returned object.\n      ticker.unref()\n    }\n\n    // run the tick immediately\n    await this._autoRefreshTokenTick()\n  }\n\n  /**\n   * This is the private implementation of {@link #stopAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _stopAutoRefresh() {\n    const ticker = this.autoRefreshTicker\n    this.autoRefreshTicker = null\n\n    if (ticker) {\n      clearInterval(ticker)\n    }\n  }\n\n  /**\n   * Starts an auto-refresh process in the background. The session is checked\n   * every few seconds. Close to the time of expiration a process is started to\n   * refresh the session. If refreshing fails it will be retried for as long as\n   * necessary.\n   *\n   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n   * to call this function, it will be called for you.\n   *\n   * On browsers the refresh process works only when the tab/window is in the\n   * foreground to conserve resources as well as prevent race conditions and\n   * flooding auth with requests. If you call this method any managed\n   * visibility change callback will be removed and you must manage visibility\n   * changes on your own.\n   *\n   * On non-browser platforms the refresh process works *continuously* in the\n   * background, which may not be desireable. You should hook into your\n   * platform's foreground indication mechanism and call these methods\n   * appropriately to conserve resources.\n   *\n   * {@see #stopAutoRefresh}\n   */\n  async startAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._startAutoRefresh()\n  }\n\n  /**\n   * Stops an active auto refresh process running in the background (if any).\n   *\n   * If you call this method any managed visibility change callback will be\n   * removed and you must manage visibility changes on your own.\n   *\n   * See {@link #startAutoRefresh} for more details.\n   */\n  async stopAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._stopAutoRefresh()\n  }\n\n  /**\n   * Runs the auto refresh token tick.\n   */\n  private async _autoRefreshTokenTick() {\n    const now = Date.now()\n\n    try {\n      const {\n        data: { session },\n      } = await this.getSession()\n\n      if (!session || !session.refresh_token || !session.expires_at) {\n        return\n      }\n\n      // session will expire in this many ticks (or has already expired if <= 0)\n      const expiresInTicks = Math.floor(\n        (session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION\n      )\n\n      if (expiresInTicks < AUTO_REFRESH_TICK_THRESHOLD) {\n        await this._callRefreshToken(session.refresh_token)\n      }\n    } catch (e: any) {\n      console.error('Auto refresh tick failed with error. This is likely a transient error.', e)\n    }\n  }\n\n  /**\n   * Registers callbacks on the browser / platform, which in-turn run\n   * algorithms when the browser window/tab are in foreground. On non-browser\n   * platforms it assumes always foreground.\n   */\n  private async _handleVisibilityChange() {\n    if (!isBrowser() || !window?.addEventListener) {\n      if (this.autoRefreshToken) {\n        // in non-browser environments the refresh token ticker runs always\n        this.startAutoRefresh()\n      }\n\n      return false\n    }\n\n    try {\n      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false)\n\n      window?.addEventListener('visibilitychange', this.visibilityChangedCallback)\n\n      // now immediately call the visbility changed callback to setup with the\n      // current visbility state\n      await this._onVisibilityChanged(true) // initial call\n    } catch (error) {\n      console.error('_handleVisibilityChange', error)\n    }\n  }\n\n  /**\n   * Callback registered with `window.addEventListener('visibilitychange')`.\n   */\n  private async _onVisibilityChanged(isInitial: boolean) {\n    if (document.visibilityState === 'visible') {\n      if (!isInitial) {\n        // initial visibility change setup is handled in another flow under #initialize()\n        await this.initializePromise\n        await this._recoverAndRefresh()\n      }\n\n      if (this.autoRefreshToken) {\n        // in browser environments the refresh token ticker runs only on focused tabs\n        // which prevents race conditions\n        this._startAutoRefresh()\n      }\n    } else if (document.visibilityState === 'hidden') {\n      if (this.autoRefreshToken) {\n        this._stopAutoRefresh()\n      }\n    }\n  }\n\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n   */\n  private _getUrlForProvider(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    }\n  ) {\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\n    if (options?.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\n    }\n    if (options?.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\n    }\n    if (options?.queryParams) {\n      const query = new URLSearchParams(options.queryParams)\n      urlParams.push(query.toString())\n    }\n    return `${this.url}/authorize?${urlParams.join('&')}`\n  }\n\n  private async _unenroll(params: MFAUnenrollParams): Promise<AuthMFAUnenrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#enroll}\n   */\n  private async _enroll(params: MFAEnrollParams): Promise<AuthMFAEnrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/factors`, {\n        body: {\n          friendly_name: params.friendlyName,\n          factor_type: params.factorType,\n          issuer: params.issuer,\n        },\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n\n      if (error) {\n        return { data: null, error }\n      }\n\n      if (data?.totp?.qr_code) {\n        data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#verify}\n   */\n  private async _verify(params: MFAVerifyParams): Promise<AuthMFAVerifyResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/verify`,\n        {\n          body: { code: params.code, challenge_id: params.challengeId },\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n      if (error) {\n        return { data: null, error }\n      }\n\n      await this._saveSession({\n        expires_at: Math.round(Date.now() / 1000) + data.expires_in,\n        ...data,\n      })\n      this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data)\n\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challenge}\n   */\n  private async _challenge(params: MFAChallengeParams): Promise<AuthMFAChallengeResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/challenge`,\n        {\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challengeAndVerify}\n   */\n  private async _challengeAndVerify(\n    params: MFAChallengeAndVerifyParams\n  ): Promise<AuthMFAVerifyResponse> {\n    const { data: challengeData, error: challengeError } = await this._challenge({\n      factorId: params.factorId,\n    })\n    if (challengeError) {\n      return { data: null, error: challengeError }\n    }\n    return await this._verify({\n      factorId: params.factorId,\n      challengeId: challengeData.id,\n      code: params.code,\n    })\n  }\n\n  /**\n   * {@see GoTrueMFAApi#listFactors}\n   */\n  private async _listFactors(): Promise<AuthMFAListFactorsResponse> {\n    const {\n      data: { user },\n      error: userError,\n    } = await this.getUser()\n    if (userError) {\n      return { data: null, error: userError }\n    }\n\n    const factors = user?.factors || []\n    const totp = factors.filter(\n      (factor) => factor.factor_type === 'totp' && factor.status === 'verified'\n    )\n\n    return {\n      data: {\n        all: factors,\n        totp,\n      },\n      error: null,\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n   */\n  private async _getAuthenticatorAssuranceLevel(): Promise<AuthMFAGetAuthenticatorAssuranceLevelResponse> {\n    const {\n      data: { session },\n      error: sessionError,\n    } = await this.getSession()\n    if (sessionError) {\n      return { data: null, error: sessionError }\n    }\n    if (!session) {\n      return {\n        data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\n        error: null,\n      }\n    }\n\n    const payload = this._decodeJWT(session.access_token)\n\n    let currentLevel: AuthenticatorAssuranceLevels | null = null\n\n    if (payload.aal) {\n      currentLevel = payload.aal\n    }\n\n    let nextLevel: AuthenticatorAssuranceLevels | null = currentLevel\n\n    const verifiedFactors =\n      session.user.factors?.filter((factor: Factor) => factor.status === 'verified') ?? []\n\n    if (verifiedFactors.length > 0) {\n      nextLevel = 'aal2'\n    }\n\n    const currentAuthenticationMethods = payload.amr || []\n\n    return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,cAAc,MAAM,kBAAkB;AAC7C,SAASC,eAAe,EAAEC,aAAa,EAAEC,UAAU,EAAEC,WAAW,QAAQ,iBAAiB;AACzF,SAEEC,8BAA8B,EAC9BC,2BAA2B,EAC3BC,uBAAuB,EACvBC,uBAAuB,EACvBC,gBAAgB,EAChBC,cAAc,EACdC,WAAW,QACN,cAAc;AACrB,SAAgBC,QAAQ,EAAEC,gBAAgB,EAAEC,aAAa,EAAEC,YAAY,QAAQ,aAAa;AAC5F,SACEC,gBAAgB,EAChBC,QAAQ,EACRC,YAAY,EACZC,kBAAkB,EAClBC,SAAS,EACTC,eAAe,EACfC,YAAY,EACZC,YAAY,EACZC,IAAI,EACJC,SAAS,EACTC,KAAK,QACA,eAAe;AACtB,OAAOC,mBAAmB,MAAM,qBAAqB;AACrD,SAASC,kBAAkB,QAAQ,iBAAiB;AAwCpDA,kBAAkB,EAAE,EAAC;AAErB,MAAMC,eAAe,GAA6D;EAChFC,GAAG,EAAE3B,UAAU;EACf4B,UAAU,EAAE3B,WAAW;EACvB4B,gBAAgB,EAAE,IAAI;EACtBC,cAAc,EAAE,IAAI;EACpBC,kBAAkB,EAAE,IAAI;EACxBC,OAAO,EAAElC;CACV;AAED;AACA,MAAMmC,0BAA0B,GAAG,EAAE,GAAG,IAAI;AAE5C;;AAEA,MAAMC,2BAA2B,GAAG,CAAC;AAErC,eAAc,MAAOC,YAAY;EA+C/B;;;EAGAC,YAAYC,OAA4B;;IA1B9B,KAAAC,mBAAmB,GAA8B,IAAIC,GAAG,EAAE;IAC1D,KAAAC,iBAAiB,GAA0C,IAAI;IAC/D,KAAAC,yBAAyB,GAAgC,IAAI;IAC7D,KAAAC,kBAAkB,GAA4C,IAAI;IAC5E;;;;;;IAMU,KAAAC,iBAAiB,GAAqC,IAAI;IAC1D,KAAAZ,kBAAkB,GAAG,IAAI;IAOnC;;;IAGU,KAAAa,gBAAgB,GAA4B,IAAI;IAMxD,MAAMC,QAAQ,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQrB,eAAe,GAAKW,OAAO,CAAE;IACnD,IAAI,CAACW,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACpB,UAAU,GAAGiB,QAAQ,CAACjB,UAAU;IACrC,IAAI,CAACC,gBAAgB,GAAGgB,QAAQ,CAAChB,gBAAgB;IACjD,IAAI,CAACC,cAAc,GAAGe,QAAQ,CAACf,cAAc;IAC7C,IAAI,CAACmB,OAAO,GAAGJ,QAAQ,CAACI,OAAO,IAAIzB,mBAAmB;IACtD,IAAI,CAAC0B,KAAK,GAAG,IAAIrD,cAAc,CAAC;MAC9B8B,GAAG,EAAEkB,QAAQ,CAAClB,GAAG;MACjBK,OAAO,EAAEa,QAAQ,CAACb,OAAO;MACzBmB,KAAK,EAAEN,QAAQ,CAACM;KACjB,CAAC;IAEF,IAAI,CAACxB,GAAG,GAAGkB,QAAQ,CAAClB,GAAG;IACvB,IAAI,CAACK,OAAO,GAAGa,QAAQ,CAACb,OAAO;IAC/B,IAAI,CAACmB,KAAK,GAAGhC,YAAY,CAAC0B,QAAQ,CAACM,KAAK,CAAC;IACzC,IAAI,CAACpB,kBAAkB,GAAGc,QAAQ,CAACd,kBAAkB;IAErD,IAAI,CAACqB,GAAG,GAAG;MACTC,MAAM,EAAE,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;MAC/BC,MAAM,EAAE,IAAI,CAACC,OAAO,CAACF,IAAI,CAAC,IAAI,CAAC;MAC/BG,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,IAAI,CAAC;MACnCK,SAAS,EAAE,IAAI,CAACC,UAAU,CAACN,IAAI,CAAC,IAAI,CAAC;MACrCO,WAAW,EAAE,IAAI,CAACC,YAAY,CAACR,IAAI,CAAC,IAAI,CAAC;MACzCS,kBAAkB,EAAE,IAAI,CAACC,mBAAmB,CAACV,IAAI,CAAC,IAAI,CAAC;MACvDW,8BAA8B,EAAE,IAAI,CAACC,+BAA+B,CAACZ,IAAI,CAAC,IAAI;KAC/E;IAED,IAAItC,SAAS,EAAE,IAAImD,UAAU,CAACC,gBAAgB,IAAI,IAAI,CAACvC,cAAc,IAAI,IAAI,CAACF,UAAU,EAAE;MACxF,IAAI;QACF,IAAI,CAACgB,gBAAgB,GAAG,IAAIwB,UAAU,CAACC,gBAAgB,CAAC,IAAI,CAACzC,UAAU,CAAC;OACzE,CAAC,OAAO0C,CAAM,EAAE;QACfC,OAAO,CAACC,KAAK,CACX,wFAAwF,EACxFF,CAAC,CACF;;MAGH,CAAAG,EAAA,OAAI,CAAC7B,gBAAgB,cAAA6B,EAAA,uBAAAA,EAAA,CAAEC,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAI;QAC3D,IAAI,CAACC,qBAAqB,CAACD,KAAK,CAACE,IAAI,CAACF,KAAK,EAAEA,KAAK,CAACE,IAAI,CAACC,OAAO,EAAE,KAAK,CAAC,EAAC;MAC1E,CAAC,CAAC;;;IAGJ,IAAI,CAACC,UAAU,EAAE;EACnB;EAEA;;;;;EAKAA,UAAUA,CAAA;IACR,IAAI,CAAC,IAAI,CAACpC,iBAAiB,EAAE;MAC3B,IAAI,CAACA,iBAAiB,GAAG,IAAI,CAACqC,WAAW,EAAE;;IAG7C,OAAO,IAAI,CAACrC,iBAAiB;EAC/B;EAEA;;;;;;EAMcqC,WAAWA,CAAA;;MACvB,IAAI,IAAI,CAACrC,iBAAiB,EAAE;QAC1B,OAAO,IAAI,CAACA,iBAAiB;;MAG/B,IAAI;QACF,IAAI,IAAI,CAACZ,kBAAkB,IAAI,IAAI,CAACkD,oBAAoB,EAAE,EAAE;UAC1D,MAAM;YAAEJ,IAAI;YAAEL;UAAK,CAAE,GAAG,MAAM,IAAI,CAACU,kBAAkB,EAAE;UAEvD,IAAIV,KAAK,EAAE;YACT;YACA;YACA,MAAM,IAAI,CAACW,cAAc,EAAE;YAE3B,OAAO;cAAEX;YAAK,CAAE;;UAGlB,MAAM;YAAEM,OAAO;YAAEM;UAAY,CAAE,GAAGP,IAAI;UAEtC,MAAM,IAAI,CAACQ,YAAY,CAACP,OAAO,CAAC;UAEhCQ,UAAU,CAAC,MAAK;YACd,IAAI,CAACV,qBAAqB,CAAC,WAAW,EAAEE,OAAO,CAAC;YAChD,IAAIM,YAAY,KAAK,UAAU,EAAE;cAC/B,IAAI,CAACR,qBAAqB,CAAC,mBAAmB,EAAEE,OAAO,CAAC;;UAE5D,CAAC,EAAE,CAAC,CAAC;UAEL,OAAO;YAAEN,KAAK,EAAE;UAAI,CAAE;;QAGxB;QACA,MAAM,IAAI,CAACe,kBAAkB,EAAE;QAC/B,OAAO;UAAEf,KAAK,EAAE;QAAI,CAAE;OACvB,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEA;UAAK,CAAE;;QAGlB,OAAO;UACLA,KAAK,EAAE,IAAIlE,gBAAgB,CAAC,wCAAwC,EAAEkE,KAAK;SAC5E;OACF,SAAS;QACR,MAAM,IAAI,CAACgB,uBAAuB,EAAE;;IAExC,CAAC;;EAED;;;;;;;;;EASMC,MAAMA,CAACC,WAA0C;;;MACrD,IAAI;QACF,MAAM,IAAI,CAACP,cAAc,EAAE;QAE3B,IAAIQ,GAAiB;QACrB,IAAI,OAAO,IAAID,WAAW,EAAE;UAC1B,MAAM;YAAEE,KAAK;YAAEC,QAAQ;YAAExD;UAAO,CAAE,GAAGqD,WAAW;UAChDC,GAAG,GAAG,MAAMlF,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,SAAS,EAAE;YAC7DK,OAAO,EAAE,IAAI,CAACA,OAAO;YACrB8D,UAAU,EAAEzD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE0D,eAAe;YACpCC,IAAI,EAAE;cACJJ,KAAK;cACLC,QAAQ;cACRhB,IAAI,EAAE,CAAAJ,EAAA,GAAApC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwC,IAAI,cAAAJ,EAAA,cAAAA,EAAA,GAAI,EAAE;cACzBwB,oBAAoB,EAAE;gBAAEC,aAAa,EAAE7D,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE8D;cAAY;aAC7D;YACDC,KAAK,EAAE1F;WACR,CAAC;SACH,MAAM,IAAI,OAAO,IAAIgF,WAAW,EAAE;UACjC,MAAM;YAAEW,KAAK;YAAER,QAAQ;YAAExD;UAAO,CAAE,GAAGqD,WAAW;UAChDC,GAAG,GAAG,MAAMlF,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,SAAS,EAAE;YAC7DK,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBgE,IAAI,EAAE;cACJK,KAAK;cACLR,QAAQ;cACRhB,IAAI,EAAE,CAAAyB,EAAA,GAAAjE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwC,IAAI,cAAAyB,EAAA,cAAAA,EAAA,GAAI,EAAE;cACzBL,oBAAoB,EAAE;gBAAEC,aAAa,EAAE7D,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE8D;cAAY;aAC7D;YACDC,KAAK,EAAE1F;WACR,CAAC;SACH,MAAM;UACL,MAAM,IAAIP,2BAA2B,CACnC,iEAAiE,CAClE;;QAGH,MAAM;UAAE0E,IAAI;UAAEL;QAAK,CAAE,GAAGmB,GAAG;QAE3B,IAAInB,KAAK,IAAI,CAACK,IAAI,EAAE;UAClB,OAAO;YAAEA,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN,KAAK,EAAEA;UAAK,CAAE;;QAG9D,MAAMM,OAAO,GAAmBD,IAAI,CAACC,OAAO;QAC5C,MAAMyB,IAAI,GAAgB1B,IAAI,CAAC0B,IAAI;QAEnC,IAAI1B,IAAI,CAACC,OAAO,EAAE;UAChB,MAAM,IAAI,CAACO,YAAY,CAACR,IAAI,CAACC,OAAO,CAAC;UACrC,IAAI,CAACF,qBAAqB,CAAC,WAAW,EAAEE,OAAO,CAAC;;QAGlD,OAAO;UAAED,IAAI,EAAE;YAAE0B,IAAI;YAAEzB;UAAO,CAAE;UAAEN,KAAK,EAAE;QAAI,CAAE;OAChD,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN;UAAK,CAAE;;QAGvD,MAAMA,KAAK;;;;EAIf;;;;;;;;;;;EAWMgC,kBAAkBA,CAACd,WAA0C;;;MACjE,IAAI;QACF,MAAM,IAAI,CAACP,cAAc,EAAE;QAE3B,IAAIQ,GAAiB;QACrB,IAAI,OAAO,IAAID,WAAW,EAAE;UAC1B,MAAM;YAAEE,KAAK;YAAEC,QAAQ;YAAExD;UAAO,CAAE,GAAGqD,WAAW;UAChDC,GAAG,GAAG,MAAMlF,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,4BAA4B,EAAE;YAChFK,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBgE,IAAI,EAAE;cACJJ,KAAK;cACLC,QAAQ;cACRI,oBAAoB,EAAE;gBAAEC,aAAa,EAAE7D,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE8D;cAAY;aAC7D;YACDC,KAAK,EAAE1F;WACR,CAAC;SACH,MAAM,IAAI,OAAO,IAAIgF,WAAW,EAAE;UACjC,MAAM;YAAEW,KAAK;YAAER,QAAQ;YAAExD;UAAO,CAAE,GAAGqD,WAAW;UAChDC,GAAG,GAAG,MAAMlF,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,4BAA4B,EAAE;YAChFK,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBgE,IAAI,EAAE;cACJK,KAAK;cACLR,QAAQ;cACRI,oBAAoB,EAAE;gBAAEC,aAAa,EAAE7D,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE8D;cAAY,CAAE;cAC9DM,OAAO,EAAE,CAAAhC,EAAA,GAAApC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEoE,OAAO,cAAAhC,EAAA,cAAAA,EAAA,GAAI;aAC9B;YACD2B,KAAK,EAAE1F;WACR,CAAC;SACH,MAAM;UACL,MAAM,IAAIP,2BAA2B,CACnC,iEAAiE,CAClE;;QAEH,MAAM;UAAE0E,IAAI;UAAEL;QAAK,CAAE,GAAGmB,GAAG;QAC3B,IAAInB,KAAK,IAAI,CAACK,IAAI,EAAE,OAAO;UAAEA,IAAI,EAAE;YAAE0B,IAAI,EAAE,IAAI;YAAEzB,OAAO,EAAE;UAAI,CAAE;UAAEN;QAAK,CAAE;QACzE,IAAIK,IAAI,CAACC,OAAO,EAAE;UAChB,MAAM,IAAI,CAACO,YAAY,CAACR,IAAI,CAACC,OAAO,CAAC;UACrC,IAAI,CAACF,qBAAqB,CAAC,WAAW,EAAEC,IAAI,CAACC,OAAO,CAAC;;QAEvD,OAAO;UAAED,IAAI;UAAEL;QAAK,CAAE;OACvB,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN;UAAK,CAAE;;QAEvD,MAAMA,KAAK;;;;EAIf;;;EAGMkC,eAAeA,CAAChB,WAAuC;;;MAC3D,MAAM,IAAI,CAACP,cAAc,EAAE;MAC3B,OAAO,IAAI,CAACwB,qBAAqB,CAACjB,WAAW,CAACkB,QAAQ,EAAE;QACtDd,UAAU,EAAE,CAAArB,EAAA,GAAAiB,WAAW,CAACrD,OAAO,cAAAoC,EAAA,uBAAAA,EAAA,CAAEqB,UAAU;QAC3Ce,MAAM,EAAE,CAAAP,EAAA,GAAAZ,WAAW,CAACrD,OAAO,cAAAiE,EAAA,uBAAAA,EAAA,CAAEO,MAAM;QACnCC,WAAW,EAAE,CAAAC,EAAA,GAAArB,WAAW,CAACrD,OAAO,cAAA0E,EAAA,uBAAAA,EAAA,CAAED,WAAW;QAC7CE,mBAAmB,EAAE,CAAAC,EAAA,GAAAvB,WAAW,CAACrD,OAAO,cAAA4E,EAAA,uBAAAA,EAAA,CAAED;OAC3C,CAAC;;;EAGJ;;;;;;EAMME,iBAAiBA,CAACxB,WAAyC;;MAC/D,MAAM,IAAI,CAACP,cAAc,EAAE;MAE3B,IAAI;QACF,MAAM;UAAE9C,OAAO;UAAEuE,QAAQ;UAAEO,KAAK;UAAEC;QAAK,CAAE,GAAG1B,WAAW;QAEvD,MAAMC,GAAG,GAAG,MAAMlF,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,4BAA4B,EAAE;UACtFK,OAAO,EAAE,IAAI,CAACA,OAAO;UACrBgE,IAAI,EAAE;YACJY,QAAQ;YACRS,QAAQ,EAAEF,KAAK;YACfC,KAAK;YACLnB,oBAAoB,EAAE;cAAEC,aAAa,EAAE7D,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE8D;YAAY;WAC7D;UACDC,KAAK,EAAE1F;SACR,CAAC;QAEF,MAAM;UAAEmE,IAAI;UAAEL;QAAK,CAAE,GAAGmB,GAAG;QAC3B,IAAInB,KAAK,IAAI,CAACK,IAAI,EAAE,OAAO;UAAEA,IAAI,EAAE;YAAE0B,IAAI,EAAE,IAAI;YAAEzB,OAAO,EAAE;UAAI,CAAE;UAAEN;QAAK,CAAE;QACzE,IAAIK,IAAI,CAACC,OAAO,EAAE;UAChB,MAAM,IAAI,CAACO,YAAY,CAACR,IAAI,CAACC,OAAO,CAAC;UACrC,IAAI,CAACF,qBAAqB,CAAC,WAAW,EAAEC,IAAI,CAACC,OAAO,CAAC;;QAEvD,OAAO;UAAED,IAAI;UAAEL;QAAK,CAAE;OACvB,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN;UAAK,CAAE;;QAEvD,MAAMA,KAAK;;IAEf,CAAC;;EAED;;;;;;;;;;;;;;;;EAgBM8C,aAAaA,CAAC5B,WAA8C;;;MAChE,IAAI;QACF,MAAM,IAAI,CAACP,cAAc,EAAE;QAE3B,IAAI,OAAO,IAAIO,WAAW,EAAE;UAC1B,MAAM;YAAEE,KAAK;YAAEvD;UAAO,CAAE,GAAGqD,WAAW;UACtC,MAAM;YAAElB;UAAK,CAAE,GAAG,MAAM/D,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,MAAM,EAAE;YACtEK,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBgE,IAAI,EAAE;cACJJ,KAAK;cACLf,IAAI,EAAE,CAAAJ,EAAA,GAAApC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwC,IAAI,cAAAJ,EAAA,cAAAA,EAAA,GAAI,EAAE;cACzB8C,WAAW,EAAE,CAAAjB,EAAA,GAAAjE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmF,gBAAgB,cAAAlB,EAAA,cAAAA,EAAA,GAAI,IAAI;cAC9CL,oBAAoB,EAAE;gBAAEC,aAAa,EAAE7D,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE8D;cAAY;aAC7D;YACDL,UAAU,EAAEzD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE0D;WACtB,CAAC;UACF,OAAO;YAAElB,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN;UAAK,CAAE;;QAEvD,IAAI,OAAO,IAAIkB,WAAW,EAAE;UAC1B,MAAM;YAAEW,KAAK;YAAEhE;UAAO,CAAE,GAAGqD,WAAW;UACtC,MAAM;YAAElB;UAAK,CAAE,GAAG,MAAM/D,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,MAAM,EAAE;YACtEK,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBgE,IAAI,EAAE;cACJK,KAAK;cACLxB,IAAI,EAAE,CAAAkC,EAAA,GAAA1E,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwC,IAAI,cAAAkC,EAAA,cAAAA,EAAA,GAAI,EAAE;cACzBQ,WAAW,EAAE,CAAAN,EAAA,GAAA5E,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmF,gBAAgB,cAAAP,EAAA,cAAAA,EAAA,GAAI,IAAI;cAC9ChB,oBAAoB,EAAE;gBAAEC,aAAa,EAAE7D,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE8D;cAAY,CAAE;cAC9DM,OAAO,EAAE,CAAAgB,EAAA,GAAApF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEoE,OAAO,cAAAgB,EAAA,cAAAA,EAAA,GAAI;;WAEhC,CAAC;UACF,OAAO;YAAE5C,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN;UAAK,CAAE;;QAEvD,MAAM,IAAIrE,2BAA2B,CAAC,mDAAmD,CAAC;OAC3F,CAAC,OAAOqE,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN;UAAK,CAAE;;QAGvD,MAAMA,KAAK;;;;EAIf;;;EAGMkD,SAASA,CAACC,MAAuB;;;MACrC,IAAI;QACF,MAAM,IAAI,CAACxC,cAAc,EAAE;QAE3B,MAAM;UAAEN,IAAI;UAAEL;QAAK,CAAE,GAAG,MAAM/D,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,SAAS,EAAE;UAC/EK,OAAO,EAAE,IAAI,CAACA,OAAO;UACrBgE,IAAI,EAAAlD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACC4E,MAAM;YACT1B,oBAAoB,EAAE;cAAEC,aAAa,EAAE,CAAAzB,EAAA,GAAAkD,MAAM,CAACtF,OAAO,cAAAoC,EAAA,uBAAAA,EAAA,CAAE0B;YAAY;UAAE,EACtE;UACDL,UAAU,EAAE,CAAAQ,EAAA,GAAAqB,MAAM,CAACtF,OAAO,cAAAiE,EAAA,uBAAAA,EAAA,CAAER,UAAU;UACtCM,KAAK,EAAE1F;SACR,CAAC;QAEF,IAAI8D,KAAK,EAAE;UACT,MAAMA,KAAK;;QAGb,IAAI,CAACK,IAAI,EAAE;UACT,MAAM,0CAA0C;;QAGlD,MAAMC,OAAO,GAAmBD,IAAI,CAACC,OAAO;QAC5C,MAAMyB,IAAI,GAAS1B,IAAI,CAAC0B,IAAI;QAE5B,IAAIzB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE8C,YAAY,EAAE;UACzB,MAAM,IAAI,CAACvC,YAAY,CAACP,OAAkB,CAAC;UAC3C,IAAI,CAACF,qBAAqB,CAAC,WAAW,EAAEE,OAAO,CAAC;;QAGlD,OAAO;UAAED,IAAI,EAAE;YAAE0B,IAAI;YAAEzB;UAAO,CAAE;UAAEN,KAAK,EAAE;QAAI,CAAE;OAChD,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN;UAAK,CAAE;;QAGvD,MAAMA,KAAK;;;;EAIf;;;;;;;;;;;;;;;;;;;EAmBMqD,aAAaA,CAACF,MAAqB;;;MACvC,IAAI;QACF,MAAM,IAAI,CAACxC,cAAc,EAAE;QAE3B,OAAO,MAAM1E,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,MAAM,EAAE;UAC3DqE,IAAI,EAAAlD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACE,YAAY,IAAI4E,MAAM,GAAG;YAAEG,WAAW,EAAEH,MAAM,CAACI;UAAU,CAAE,GAAG,IAAI,CAAC,EACnE,QAAQ,IAAIJ,MAAM,GAAG;YAAEK,MAAM,EAAEL,MAAM,CAACK;UAAM,CAAE,GAAG,IAAI,CAAC;YAC1DC,WAAW,EAAE,CAAA3B,EAAA,IAAA7B,EAAA,GAAAkD,MAAM,CAACtF,OAAO,cAAAoC,EAAA,uBAAAA,EAAA,CAAEqB,UAAU,cAAAQ,EAAA,cAAAA,EAAA,GAAI4B;UAAS,IAChD,EAAAnB,EAAA,GAAAY,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEtF,OAAO,cAAA0E,EAAA,uBAAAA,EAAA,CAAEZ,YAAY,IAC7B;YAAEF,oBAAoB,EAAE;cAAEC,aAAa,EAAEyB,MAAM,CAACtF,OAAO,CAAC8D;YAAY;UAAE,CAAE,GACxE,IAAI,CAAC;YACTgC,kBAAkB,EAAE;UAAI,EACzB;UACDnG,OAAO,EAAE,IAAI,CAACA,OAAO;UACrBoE,KAAK,EAAExF;SACR,CAAC;OACH,CAAC,OAAO4D,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE,IAAI;YAAEL;UAAK,CAAE;;QAE9B,MAAMA,KAAK;;;;EAIf;;;;EAIM4D,UAAUA,CAAA;;MAoBd;MACA;MACA,MAAM,IAAI,CAACzF,iBAAiB;MAE5B,IAAI0F,cAAc,GAAmB,IAAI;MAEzC,IAAI,IAAI,CAACvG,cAAc,EAAE;QACvB,MAAMwG,YAAY,GAAG,MAAMvH,YAAY,CAAC,IAAI,CAACkC,OAAO,EAAE,IAAI,CAACrB,UAAU,CAAC;QAEtE,IAAI0G,YAAY,KAAK,IAAI,EAAE;UACzB,IAAI,IAAI,CAACC,eAAe,CAACD,YAAY,CAAC,EAAE;YACtCD,cAAc,GAAGC,YAAY;WAC9B,MAAM;YACL,MAAM,IAAI,CAACnD,cAAc,EAAE;;;OAGhC,MAAM;QACLkD,cAAc,GAAG,IAAI,CAACrF,eAAe;;MAGvC,IAAI,CAACqF,cAAc,EAAE;QACnB,OAAO;UAAExD,IAAI,EAAE;YAAEC,OAAO,EAAE;UAAI,CAAE;UAAEN,KAAK,EAAE;QAAI,CAAE;;MAGjD,MAAMgE,UAAU,GAAGH,cAAc,CAACI,UAAU,GACxCJ,cAAc,CAACI,UAAU,IAAIC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,GAC9C,KAAK;MACT,IAAI,CAACH,UAAU,EAAE;QACf,OAAO;UAAE3D,IAAI,EAAE;YAAEC,OAAO,EAAEuD;UAAc,CAAE;UAAE7D,KAAK,EAAE;QAAI,CAAE;;MAG3D,MAAM;QAAEM,OAAO;QAAEN;MAAK,CAAE,GAAG,MAAM,IAAI,CAACoE,iBAAiB,CAACP,cAAc,CAACQ,aAAa,CAAC;MACrF,IAAIrE,KAAK,EAAE;QACT,OAAO;UAAEK,IAAI,EAAE;YAAEC,OAAO,EAAE;UAAI,CAAE;UAAEN;QAAK,CAAE;;MAG3C,OAAO;QAAEK,IAAI,EAAE;UAAEC;QAAO,CAAE;QAAEN,KAAK,EAAE;MAAI,CAAE;IAC3C,CAAC;;EAED;;;;EAIMsE,OAAOA,CAACC,GAAY;;;MACxB,IAAI;QACF,IAAI,CAACA,GAAG,EAAE;UACR,MAAM;YAAElE,IAAI;YAAEL;UAAK,CAAE,GAAG,MAAM,IAAI,CAAC4D,UAAU,EAAE;UAC/C,IAAI5D,KAAK,EAAE;YACT,MAAMA,KAAK;;UAGb;UACAuE,GAAG,GAAG,CAAAzC,EAAA,IAAA7B,EAAA,GAAAI,IAAI,CAACC,OAAO,cAAAL,EAAA,uBAAAA,EAAA,CAAEmD,YAAY,cAAAtB,EAAA,cAAAA,EAAA,GAAI4B,SAAS;;QAG/C,OAAO,MAAMzH,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAACxB,GAAG,OAAO,EAAE;UAC3DK,OAAO,EAAE,IAAI,CAACA,OAAO;UACrB+G,GAAG,EAAEA,GAAG;UACR3C,KAAK,EAAEzF;SACR,CAAC;OACH,CAAC,OAAO6D,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAE0B,IAAI,EAAE;YAAI,CAAE;YAAE/B;UAAK,CAAE;;QAGxC,MAAMA,KAAK;;;;EAIf;;;EAGMwE,UAAUA,CACdC,UAA0B,EAGpB;IAAA,IAFN5G,OAAA,GAAA6G,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAhB,SAAA,GAAAgB,SAAA,MAEI,EAAE;;MAEN,IAAI;QACF,MAAM;UAAErE,IAAI,EAAEuE,WAAW;UAAE5E,KAAK,EAAE6E;QAAY,CAAE,GAAG,MAAM,IAAI,CAACjB,UAAU,EAAE;QAC1E,IAAIiB,YAAY,EAAE;UAChB,MAAMA,YAAY;;QAEpB,IAAI,CAACD,WAAW,CAACtE,OAAO,EAAE;UACxB,MAAM,IAAIzE,uBAAuB,EAAE;;QAErC,MAAMyE,OAAO,GAAYsE,WAAW,CAACtE,OAAO;QAC5C,MAAM;UAAED,IAAI;UAAEL,KAAK,EAAE8E;QAAS,CAAE,GAAG,MAAM7I,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAACxB,GAAG,OAAO,EAAE;UACvFK,OAAO,EAAE,IAAI,CAACA,OAAO;UACrB8D,UAAU,EAAEzD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE0D,eAAe;UACpCC,IAAI,EAAEiD,UAAU;UAChBF,GAAG,EAAEjE,OAAO,CAAC8C,YAAY;UACzBxB,KAAK,EAAEzF;SACR,CAAC;QACF,IAAI2I,SAAS,EAAE,MAAMA,SAAS;QAC9BxE,OAAO,CAACyB,IAAI,GAAG1B,IAAI,CAAC0B,IAAY;QAChC,MAAM,IAAI,CAAClB,YAAY,CAACP,OAAO,CAAC;QAChC,IAAI,CAACF,qBAAqB,CAAC,cAAc,EAAEE,OAAO,CAAC;QAEnD,OAAO;UAAED,IAAI,EAAE;YAAE0B,IAAI,EAAEzB,OAAO,CAACyB;UAAI,CAAE;UAAE/B,KAAK,EAAE;QAAI,CAAE;OACrD,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAE0B,IAAI,EAAE;YAAI,CAAE;YAAE/B;UAAK,CAAE;;QAGxC,MAAMA,KAAK;;IAEf,CAAC;;EAED;;;EAGQ+E,UAAUA,CAACR,GAAW;IAK5B,OAAOlI,gBAAgB,CAACkI,GAAG,CAAC;EAC9B;EAEA;;;;;EAKMS,UAAUA,CAACnB,cAGhB;;MACC,IAAI;QACF,IAAI,CAACA,cAAc,CAACT,YAAY,IAAI,CAACS,cAAc,CAACQ,aAAa,EAAE;UACjE,MAAM,IAAIxI,uBAAuB,EAAE;;QAGrC,MAAMoJ,OAAO,GAAGf,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI;QACjC,IAAIe,SAAS,GAAGD,OAAO;QACvB,IAAIjB,UAAU,GAAG,IAAI;QACrB,IAAI1D,OAAO,GAAmB,IAAI;QAClC,MAAM6E,OAAO,GAAG9I,gBAAgB,CAACwH,cAAc,CAACT,YAAY,CAAC;QAC7D,IAAI+B,OAAO,CAACC,GAAG,EAAE;UACfF,SAAS,GAAGC,OAAO,CAACC,GAAG;UACvBpB,UAAU,GAAGkB,SAAS,IAAID,OAAO;;QAGnC,IAAIjB,UAAU,EAAE;UACd,MAAM;YAAE1D,OAAO,EAAE+E,gBAAgB;YAAErF;UAAK,CAAE,GAAG,MAAM,IAAI,CAACoE,iBAAiB,CACvEP,cAAc,CAACQ,aAAa,CAC7B;UACD,IAAIrE,KAAK,EAAE;YACT,OAAO;cAAEK,IAAI,EAAE;gBAAE0B,IAAI,EAAE,IAAI;gBAAEzB,OAAO,EAAE;cAAI,CAAE;cAAEN,KAAK,EAAEA;YAAK,CAAE;;UAG9D,IAAI,CAACqF,gBAAgB,EAAE;YACrB,OAAO;cAAEhF,IAAI,EAAE;gBAAE0B,IAAI,EAAE,IAAI;gBAAEzB,OAAO,EAAE;cAAI,CAAE;cAAEN,KAAK,EAAE;YAAI,CAAE;;UAE7DM,OAAO,GAAG+E,gBAAgB;SAC3B,MAAM;UACL,MAAM;YAAEhF,IAAI;YAAEL;UAAK,CAAE,GAAG,MAAM,IAAI,CAACsE,OAAO,CAACT,cAAc,CAACT,YAAY,CAAC;UACvE,IAAIpD,KAAK,EAAE;YACT,MAAMA,KAAK;;UAEbM,OAAO,GAAG;YACR8C,YAAY,EAAES,cAAc,CAACT,YAAY;YACzCiB,aAAa,EAAER,cAAc,CAACQ,aAAa;YAC3CtC,IAAI,EAAE1B,IAAI,CAAC0B,IAAI;YACfuD,UAAU,EAAE,QAAQ;YACpBC,UAAU,EAAEL,SAAS,GAAGD,OAAO;YAC/BhB,UAAU,EAAEiB;WACb;UACD,MAAM,IAAI,CAACrE,YAAY,CAACP,OAAO,CAAC;UAChC,IAAI,CAACF,qBAAqB,CAAC,WAAW,EAAEE,OAAO,CAAC;;QAGlD,OAAO;UAAED,IAAI,EAAE;YAAE0B,IAAI,EAAEzB,OAAO,CAACyB,IAAI;YAAEzB;UAAO,CAAE;UAAEN,KAAK,EAAE;QAAI,CAAE;OAC9D,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAEC,OAAO,EAAE,IAAI;cAAEyB,IAAI,EAAE;YAAI,CAAE;YAAE/B;UAAK,CAAE;;QAGvD,MAAMA,KAAK;;IAEf,CAAC;;EAED;;;;;;EAMMwF,cAAcA,CAAC3B,cAA0C;;;MAC7D,IAAI;QACF,IAAI,CAACA,cAAc,EAAE;UACnB,MAAM;YAAExD,IAAI;YAAEL;UAAK,CAAE,GAAG,MAAM,IAAI,CAAC4D,UAAU,EAAE;UAC/C,IAAI5D,KAAK,EAAE;YACT,MAAMA,KAAK;;UAGb6D,cAAc,GAAG,CAAA5D,EAAA,GAAAI,IAAI,CAACC,OAAO,cAAAL,EAAA,cAAAA,EAAA,GAAIyD,SAAS;;QAG5C,IAAI,EAACG,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEQ,aAAa,GAAE;UAClC,MAAM,IAAIxI,uBAAuB,EAAE;;QAGrC,MAAM;UAAEyE,OAAO;UAAEN;QAAK,CAAE,GAAG,MAAM,IAAI,CAACoE,iBAAiB,CAACP,cAAc,CAACQ,aAAa,CAAC;QACrF,IAAIrE,KAAK,EAAE;UACT,OAAO;YAAEK,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN,KAAK,EAAEA;UAAK,CAAE;;QAG9D,IAAI,CAACM,OAAO,EAAE;UACZ,OAAO;YAAED,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN,KAAK,EAAE;UAAI,CAAE;;QAG7D,OAAO;UAAEK,IAAI,EAAE;YAAE0B,IAAI,EAAEzB,OAAO,CAACyB,IAAI;YAAEzB;UAAO,CAAE;UAAEN,KAAK,EAAE;QAAI,CAAE;OAC9D,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAE0B,IAAI,EAAE,IAAI;cAAEzB,OAAO,EAAE;YAAI,CAAE;YAAEN;UAAK,CAAE;;QAGvD,MAAMA,KAAK;;;;EAIf;;;EAGcU,kBAAkBA,CAAA;;MAO9B,IAAI;QACF,IAAI,CAACjE,SAAS,EAAE,EAAE,MAAM,IAAIf,8BAA8B,CAAC,sBAAsB,CAAC;QAClF,IAAI,CAAC,IAAI,CAAC+E,oBAAoB,EAAE,EAAE;UAChC,MAAM,IAAI/E,8BAA8B,CAAC,sCAAsC,CAAC;;QAGlF,MAAM+J,iBAAiB,GAAGjJ,kBAAkB,CAAC,mBAAmB,CAAC;QACjE,IAAIiJ,iBAAiB,EAAE;UACrB,MAAMC,UAAU,GAAGlJ,kBAAkB,CAAC,YAAY,CAAC;UACnD,IAAI,CAACkJ,UAAU,EAAE,MAAM,IAAIhK,8BAA8B,CAAC,yBAAyB,CAAC;UACpF,MAAMsE,KAAK,GAAGxD,kBAAkB,CAAC,OAAO,CAAC;UACzC,IAAI,CAACwD,KAAK,EAAE,MAAM,IAAItE,8BAA8B,CAAC,oBAAoB,CAAC;UAE1E,MAAM,IAAIA,8BAA8B,CAAC+J,iBAAiB,EAAE;YAAEzF,KAAK;YAAE2F,IAAI,EAAED;UAAU,CAAE,CAAC;;QAG1F,MAAME,cAAc,GAAGpJ,kBAAkB,CAAC,gBAAgB,CAAC;QAC3D,MAAMqJ,sBAAsB,GAAGrJ,kBAAkB,CAAC,wBAAwB,CAAC;QAC3E,MAAM4G,YAAY,GAAG5G,kBAAkB,CAAC,cAAc,CAAC;QACvD,IAAI,CAAC4G,YAAY,EAAE,MAAM,IAAI1H,8BAA8B,CAAC,2BAA2B,CAAC;QACxF,MAAM6J,UAAU,GAAG/I,kBAAkB,CAAC,YAAY,CAAC;QACnD,IAAI,CAAC+I,UAAU,EAAE,MAAM,IAAI7J,8BAA8B,CAAC,yBAAyB,CAAC;QACpF,MAAM2I,aAAa,GAAG7H,kBAAkB,CAAC,eAAe,CAAC;QACzD,IAAI,CAAC6H,aAAa,EAAE,MAAM,IAAI3I,8BAA8B,CAAC,4BAA4B,CAAC;QAC1F,MAAM4J,UAAU,GAAG9I,kBAAkB,CAAC,YAAY,CAAC;QACnD,IAAI,CAAC8I,UAAU,EAAE,MAAM,IAAI5J,8BAA8B,CAAC,yBAAyB,CAAC;QAEpF,MAAMuJ,OAAO,GAAGa,IAAI,CAACC,KAAK,CAAC7B,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC;QAC7C,MAAMF,UAAU,GAAGgB,OAAO,GAAGe,QAAQ,CAACT,UAAU,CAAC;QAEjD,MAAM;UAAElF,IAAI;UAAEL;QAAK,CAAE,GAAG,MAAM,IAAI,CAACsE,OAAO,CAAClB,YAAY,CAAC;QACxD,IAAIpD,KAAK,EAAE,MAAMA,KAAK;QACtB,MAAM+B,IAAI,GAAS1B,IAAI,CAAC0B,IAAI;QAC5B,MAAMzB,OAAO,GAAY;UACvBsF,cAAc;UACdC,sBAAsB;UACtBzC,YAAY;UACZmC,UAAU,EAAES,QAAQ,CAACT,UAAU,CAAC;UAChCtB,UAAU;UACVI,aAAa;UACbiB,UAAU;UACVvD;SACD;QACD,MAAMnB,YAAY,GAAGpE,kBAAkB,CAAC,MAAM,CAAC;QAE/C;QACAyJ,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,EAAE;QAEzB,OAAO;UAAE9F,IAAI,EAAE;YAAEC,OAAO;YAAEM;UAAY,CAAE;UAAEZ,KAAK,EAAE;QAAI,CAAE;OACxD,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAEC,OAAO,EAAE,IAAI;cAAEM,YAAY,EAAE;YAAI,CAAE;YAAEZ;UAAK,CAAE;;QAG/D,MAAMA,KAAK;;IAEf,CAAC;;EAED;;;EAGQS,oBAAoBA,CAAA;IAC1B,OACEhE,SAAS,EAAE,KACV2J,OAAO,CAAC5J,kBAAkB,CAAC,cAAc,CAAC,CAAC,IAC1C4J,OAAO,CAAC5J,kBAAkB,CAAC,mBAAmB,CAAC,CAAC,CAAC;EAEvD;EAEA;;;;;;;EAOM6J,OAAOA,CAAA;;;MACX,MAAM;QAAEhG,IAAI;QAAEL,KAAK,EAAE6E;MAAY,CAAE,GAAG,MAAM,IAAI,CAACjB,UAAU,EAAE;MAC7D,IAAIiB,YAAY,EAAE;QAChB,OAAO;UAAE7E,KAAK,EAAE6E;QAAY,CAAE;;MAEhC,MAAMyB,WAAW,GAAG,CAAArG,EAAA,GAAAI,IAAI,CAACC,OAAO,cAAAL,EAAA,uBAAAA,EAAA,CAAEmD,YAAY;MAC9C,IAAIkD,WAAW,EAAE;QACf,MAAM;UAAEtG;QAAK,CAAE,GAAG,MAAM,IAAI,CAACtB,KAAK,CAAC2H,OAAO,CAACC,WAAW,CAAC;QACvD,IAAItG,KAAK,EAAE;UACT;UACA;UACA,IAAI,EAAEjE,cAAc,CAACiE,KAAK,CAAC,KAAKA,KAAK,CAACuG,MAAM,KAAK,GAAG,IAAIvG,KAAK,CAACuG,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE;YAC9E,OAAO;cAAEvG;YAAK,CAAE;;;;MAItB,MAAM,IAAI,CAACW,cAAc,EAAE;MAC3B,IAAI,CAACP,qBAAqB,CAAC,YAAY,EAAE,IAAI,CAAC;MAC9C,OAAO;QAAEJ,KAAK,EAAE;MAAI,CAAE;;;EAGxB;;;;EAIAwG,iBAAiBA,CAACC,QAAmE;IAGnF,MAAMC,EAAE,GAAW7J,IAAI,EAAE;IACzB,MAAM8J,YAAY,GAAiB;MACjCD,EAAE;MACFD,QAAQ;MACRG,WAAW,EAAEA,CAAA,KAAK;QAChB,IAAI,CAAC9I,mBAAmB,CAAC+I,MAAM,CAACH,EAAE,CAAC;MACrC;KACD;IAED,IAAI,CAAC5I,mBAAmB,CAACgJ,GAAG,CAACJ,EAAE,EAAEC,YAAY,CAAC;IAE9C,IAAI,CAACI,kBAAkB,CAACL,EAAE,CAAC;IAE3B,OAAO;MAAErG,IAAI,EAAE;QAAEsG;MAAY;IAAE,CAAE;EACnC;EAEcI,kBAAkBA,CAACL,EAAU;;;MACzC,IAAI;QACF,MAAM;UACJrG,IAAI,EAAE;YAAEC;UAAO,CAAE;UACjBN;QAAK,CACN,GAAG,MAAM,IAAI,CAAC4D,UAAU,EAAE;QAC3B,IAAI5D,KAAK,EAAE,MAAMA,KAAK;QAEtB,CAAAC,EAAA,OAAI,CAACnC,mBAAmB,CAACkJ,GAAG,CAACN,EAAE,CAAC,cAAAzG,EAAA,uBAAAA,EAAA,CAAEwG,QAAQ,CAAC,iBAAiB,EAAEnG,OAAO,CAAC;OACvE,CAAC,OAAO2G,GAAG,EAAE;QACZ,CAAAnF,EAAA,OAAI,CAAChE,mBAAmB,CAACkJ,GAAG,CAACN,EAAE,CAAC,cAAA5E,EAAA,uBAAAA,EAAA,CAAE2E,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC;QACnE1G,OAAO,CAACC,KAAK,CAACiH,GAAG,CAAC;;;;EAItB;;;;;;EAMMC,qBAAqBA,CACzB9F,KAAa,EAIP;IAAA,IAHNvD,OAAA,GAAA6G,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAhB,SAAA,GAAAgB,SAAA,MAGI,EAAE;;MAQN,IAAI;QACF,OAAO,MAAMzI,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,UAAU,EAAE;UAC/DqE,IAAI,EAAE;YAAEJ,KAAK;YAAEK,oBAAoB,EAAE;cAAEC,aAAa,EAAE7D,OAAO,CAAC8D;YAAY;UAAE,CAAE;UAC9EnE,OAAO,EAAE,IAAI,CAACA,OAAO;UACrB8D,UAAU,EAAEzD,OAAO,CAACyD;SACrB,CAAC;OACH,CAAC,OAAOtB,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE,IAAI;YAAEL;UAAK,CAAE;;QAG9B,MAAMA,KAAK;;IAEf,CAAC;;EAED;;;;EAIcmH,mBAAmBA,CAACC,YAAoB;;MACpD,IAAI;QACF,MAAMC,SAAS,GAAGnD,IAAI,CAACC,GAAG,EAAE;QAE5B;QACA,OAAO,MAAMrH,SAAS,CACbwK,OAAO,IAAIC,SAAA;UAChB,MAAMxK,KAAK,CAACuK,OAAO,GAAG,GAAG,CAAC,EAAC;UAE3B,OAAO,MAAMrL,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,iCAAiC,EAAE;YACtFqE,IAAI,EAAE;cAAE6C,aAAa,EAAE+C;YAAY,CAAE;YACrC5J,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBoE,KAAK,EAAE1F;WACR,CAAC;QACJ,CAAC,GACD,CAACoL,OAAO,EAAEE,CAAC,EAAEC,MAAM,KACjBA,MAAM,IACNA,MAAM,CAACzH,KAAK,IACZyH,MAAM,CAACzH,KAAK,YAAYpE,uBAAuB;QAC/C;QACAsI,IAAI,CAACC,GAAG,EAAE,GAAG,CAACmD,OAAO,GAAG,CAAC,IAAI,GAAG,GAAGD,SAAS,GAAG5J,0BAA0B,CAC5E;OACF,CAAC,OAAOuC,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE;cAAEC,OAAO,EAAE,IAAI;cAAEyB,IAAI,EAAE;YAAI,CAAE;YAAE/B;UAAK,CAAE;;QAEvD,MAAMA,KAAK;;IAEf,CAAC;;EAEO+D,eAAeA,CAACD,YAAqB;IAC3C,MAAM4D,cAAc,GAClB,OAAO5D,YAAY,KAAK,QAAQ,IAChCA,YAAY,KAAK,IAAI,IACrB,cAAc,IAAIA,YAAY,IAC9B,eAAe,IAAIA,YAAY,IAC/B,YAAY,IAAIA,YAAY;IAE9B,OAAO4D,cAAc;EACvB;EAEQvF,qBAAqBA,CAC3BC,QAAkB,EAMZ;IAAA,IALNvE,OAAA,GAAA6G,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAhB,SAAA,GAAAgB,SAAA,MAKI,EAAE;IAEN,MAAMvH,GAAG,GAAW,IAAI,CAACwK,kBAAkB,CAACvF,QAAQ,EAAE;MACpDd,UAAU,EAAEzD,OAAO,CAACyD,UAAU;MAC9Be,MAAM,EAAExE,OAAO,CAACwE,MAAM;MACtBC,WAAW,EAAEzE,OAAO,CAACyE;KACtB,CAAC;IACF;IACA,IAAI7F,SAAS,EAAE,IAAI,CAACoB,OAAO,CAAC2E,mBAAmB,EAAE;MAC/CyD,MAAM,CAACC,QAAQ,CAAC3H,MAAM,CAACpB,GAAG,CAAC;;IAE7B,OAAO;MAAEkD,IAAI,EAAE;QAAE+B,QAAQ;QAAEjF;MAAG,CAAE;MAAE6C,KAAK,EAAE;IAAI,CAAE;EACjD;EAEA;;;;EAIce,kBAAkBA,CAAA;;;MAC9B,IAAI;QACF,MAAM8C,cAAc,GAAG,MAAMtH,YAAY,CAAC,IAAI,CAACkC,OAAO,EAAE,IAAI,CAACrB,UAAU,CAAC;QACxE,IAAI,CAAC,IAAI,CAAC2G,eAAe,CAACF,cAAc,CAAC,EAAE;UACzC,IAAIA,cAAc,KAAK,IAAI,EAAE;YAC3B,MAAM,IAAI,CAAClD,cAAc,EAAE;;UAG7B;;QAGF,MAAMsE,OAAO,GAAGa,IAAI,CAACC,KAAK,CAAC7B,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC;QAE7C,IAAI,CAAC,CAAAlE,EAAA,GAAA4D,cAAc,CAACI,UAAU,cAAAhE,EAAA,cAAAA,EAAA,GAAI2H,QAAQ,IAAI3C,OAAO,GAAG1J,aAAa,EAAE;UACrE,IAAI,IAAI,CAAC8B,gBAAgB,IAAIwG,cAAc,CAACQ,aAAa,EAAE;YACzD,MAAM;cAAErE;YAAK,CAAE,GAAG,MAAM,IAAI,CAACoE,iBAAiB,CAACP,cAAc,CAACQ,aAAa,CAAC;YAE5E,IAAIrE,KAAK,EAAE;cACTD,OAAO,CAAC8H,GAAG,CAAC7H,KAAK,CAAC8H,OAAO,CAAC;cAC1B,MAAM,IAAI,CAACnH,cAAc,EAAE;;WAE9B,MAAM;YACL,MAAM,IAAI,CAACA,cAAc,EAAE;;SAE9B,MAAM;UACL,IAAI,IAAI,CAACrD,cAAc,EAAE;YACvB,MAAM,IAAI,CAACuD,YAAY,CAACgD,cAAc,CAAC;;UAEzC,IAAI,CAACzD,qBAAqB,CAAC,WAAW,EAAEyD,cAAc,CAAC;;OAE1D,CAAC,OAAOoD,GAAG,EAAE;QACZlH,OAAO,CAACC,KAAK,CAACiH,GAAG,CAAC;QAClB;;;;EAIU7C,iBAAiBA,CAACgD,YAAoB;;;MAClD;MACA,IAAI,IAAI,CAAClJ,kBAAkB,EAAE;QAC3B,OAAO,IAAI,CAACA,kBAAkB,CAAC6J,OAAO;;MAGxC,IAAI;QACF,IAAI,CAAC7J,kBAAkB,GAAG,IAAI5B,QAAQ,EAA0B;QAEhE,IAAI,CAAC8K,YAAY,EAAE;UACjB,MAAM,IAAIvL,uBAAuB,EAAE;;QAErC,MAAM;UAAEwE,IAAI;UAAEL;QAAK,CAAE,GAAG,MAAM,IAAI,CAACmH,mBAAmB,CAACC,YAAY,CAAC;QACpE,IAAIpH,KAAK,EAAE,MAAMA,KAAK;QACtB,IAAI,CAACK,IAAI,CAACC,OAAO,EAAE,MAAM,IAAIzE,uBAAuB,EAAE;QAEtD,MAAM,IAAI,CAACgF,YAAY,CAACR,IAAI,CAACC,OAAO,CAAC;QACrC,IAAI,CAACF,qBAAqB,CAAC,iBAAiB,EAAEC,IAAI,CAACC,OAAO,CAAC;QAE3D,MAAMmH,MAAM,GAAG;UAAEnH,OAAO,EAAED,IAAI,CAACC,OAAO;UAAEN,KAAK,EAAE;QAAI,CAAE;QAErD,IAAI,CAAC9B,kBAAkB,CAAC8J,OAAO,CAACP,MAAM,CAAC;QAEvC,OAAOA,MAAM;OACd,CAAC,OAAOzH,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,MAAMyH,MAAM,GAAG;YAAEnH,OAAO,EAAE,IAAI;YAAEN;UAAK,CAAE;UAEvC,CAAAC,EAAA,OAAI,CAAC/B,kBAAkB,cAAA+B,EAAA,uBAAAA,EAAA,CAAE+H,OAAO,CAACP,MAAM,CAAC;UAExC,OAAOA,MAAM;;QAGf,CAAA3F,EAAA,OAAI,CAAC5D,kBAAkB,cAAA4D,EAAA,uBAAAA,EAAA,CAAEmG,MAAM,CAACjI,KAAK,CAAC;QACtC,MAAMA,KAAK;OACZ,SAAS;QACR,IAAI,CAAC9B,kBAAkB,GAAG,IAAI;;;;EAI1BkC,qBAAqBA,CAACD,KAAsB,EAAEG,OAAuB,EAAkB;IAAA,IAAhB4H,SAAS,GAAAxD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAhB,SAAA,GAAAgB,SAAA,MAAG,IAAI;IAC7F,IAAI,IAAI,CAACtG,gBAAgB,IAAI8J,SAAS,EAAE;MACtC,IAAI,CAAC9J,gBAAgB,CAAC+J,WAAW,CAAC;QAAEhI,KAAK;QAAEG;MAAO,CAAE,CAAC;;IAGvD,IAAI,CAACxC,mBAAmB,CAACsK,OAAO,CAAEC,CAAC,IAAKA,CAAC,CAAC5B,QAAQ,CAACtG,KAAK,EAAEG,OAAO,CAAC,CAAC;EACrE;EAEA;;;;EAIcO,YAAYA,CAACP,OAAgB;;MACzC,IAAI,CAAC,IAAI,CAAChD,cAAc,EAAE;QACxB,IAAI,CAACkB,eAAe,GAAG8B,OAAO;;MAGhC,IAAI,IAAI,CAAChD,cAAc,IAAIgD,OAAO,CAAC2D,UAAU,EAAE;QAC7C,MAAM,IAAI,CAACqE,eAAe,CAAChI,OAAO,CAAC;;IAEvC,CAAC;;EAEOgI,eAAeA,CAACzE,cAAuB;IAC7C,OAAOjH,YAAY,CAAC,IAAI,CAAC6B,OAAO,EAAE,IAAI,CAACrB,UAAU,EAAEyG,cAAc,CAAC;EACpE;EAEclD,cAAcA,CAAA;;MAC1B,IAAI,IAAI,CAACrD,cAAc,EAAE;QACvB,MAAMZ,eAAe,CAAC,IAAI,CAAC+B,OAAO,EAAE,IAAI,CAACrB,UAAU,CAAC;OACrD,MAAM;QACL,IAAI,CAACoB,eAAe,GAAG,IAAI;;IAE/B,CAAC;;EAED;;;;;;EAMQ+J,gCAAgCA,CAAA;IACtC,MAAM9B,QAAQ,GAAG,IAAI,CAACxI,yBAAyB;IAC/C,IAAI,CAACA,yBAAyB,GAAG,IAAI;IAErC,IAAI;MACF,IAAIwI,QAAQ,IAAIhK,SAAS,EAAE,KAAIwJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEuC,mBAAmB,GAAE;QAC1DvC,MAAM,CAACuC,mBAAmB,CAAC,kBAAkB,EAAE/B,QAAQ,CAAC;;KAE3D,CAAC,OAAO3G,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,2CAA2C,EAAEF,CAAC,CAAC;;EAEjE;EAEA;;;;EAIc2I,iBAAiBA,CAAA;;MAC7B,MAAM,IAAI,CAACC,gBAAgB,EAAE;MAE7B,MAAMC,MAAM,GAAGC,WAAW,CAAC,MAAM,IAAI,CAACC,qBAAqB,EAAE,EAAEpL,0BAA0B,CAAC;MAC1F,IAAI,CAACO,iBAAiB,GAAG2K,MAAM;MAE/B,IAAIA,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAI,OAAOA,MAAM,CAACG,KAAK,KAAK,UAAU,EAAE;QAC9E;QACA;QACA;QACA;QACA;QACA;QACAH,MAAM,CAACG,KAAK,EAAE;;MAGhB;MACA,MAAM,IAAI,CAACD,qBAAqB,EAAE;IACpC,CAAC;;EAED;;;;EAIcH,gBAAgBA,CAAA;;MAC5B,MAAMC,MAAM,GAAG,IAAI,CAAC3K,iBAAiB;MACrC,IAAI,CAACA,iBAAiB,GAAG,IAAI;MAE7B,IAAI2K,MAAM,EAAE;QACVI,aAAa,CAACJ,MAAM,CAAC;;IAEzB,CAAC;;EAED;;;;;;;;;;;;;;;;;;;;;;EAsBMK,gBAAgBA,CAAA;;MACpB,IAAI,CAACT,gCAAgC,EAAE;MACvC,MAAM,IAAI,CAACE,iBAAiB,EAAE;IAChC,CAAC;;EAED;;;;;;;;EAQMQ,eAAeA,CAAA;;MACnB,IAAI,CAACV,gCAAgC,EAAE;MACvC,MAAM,IAAI,CAACG,gBAAgB,EAAE;IAC/B,CAAC;;EAED;;;EAGcG,qBAAqBA,CAAA;;MACjC,MAAM1E,GAAG,GAAGD,IAAI,CAACC,GAAG,EAAE;MAEtB,IAAI;QACF,MAAM;UACJ9D,IAAI,EAAE;YAAEC;UAAO;QAAE,CAClB,GAAG,MAAM,IAAI,CAACsD,UAAU,EAAE;QAE3B,IAAI,CAACtD,OAAO,IAAI,CAACA,OAAO,CAAC+D,aAAa,IAAI,CAAC/D,OAAO,CAAC2D,UAAU,EAAE;UAC7D;;QAGF;QACA,MAAMiF,cAAc,GAAGpD,IAAI,CAACqD,KAAK,CAC/B,CAAC7I,OAAO,CAAC2D,UAAU,GAAG,IAAI,GAAGE,GAAG,IAAI1G,0BAA0B,CAC/D;QAED,IAAIyL,cAAc,GAAGxL,2BAA2B,EAAE;UAChD,MAAM,IAAI,CAAC0G,iBAAiB,CAAC9D,OAAO,CAAC+D,aAAa,CAAC;;OAEtD,CAAC,OAAOvE,CAAM,EAAE;QACfC,OAAO,CAACC,KAAK,CAAC,wEAAwE,EAAEF,CAAC,CAAC;;IAE9F,CAAC;;EAED;;;;;EAKckB,uBAAuBA,CAAA;;MACnC,IAAI,CAACvE,SAAS,EAAE,IAAI,EAACwJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE/F,gBAAgB,GAAE;QAC7C,IAAI,IAAI,CAAC7C,gBAAgB,EAAE;UACzB;UACA,IAAI,CAAC2L,gBAAgB,EAAE;;QAGzB,OAAO,KAAK;;MAGd,IAAI;QACF,IAAI,CAAC/K,yBAAyB,GAAG,MAAWsJ,SAAA;UAAC,aAAM,IAAI,CAAC6B,oBAAoB,CAAC,KAAK,CAAC;QAAA;QAEnFnD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE/F,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,CAACjC,yBAAyB,CAAC;QAE5E;QACA;QACA,MAAM,IAAI,CAACmL,oBAAoB,CAAC,IAAI,CAAC,EAAC;OACvC,CAAC,OAAOpJ,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;;IAEnD,CAAC;;EAED;;;EAGcoJ,oBAAoBA,CAACC,SAAkB;;MACnD,IAAIC,QAAQ,CAACC,eAAe,KAAK,SAAS,EAAE;QAC1C,IAAI,CAACF,SAAS,EAAE;UACd;UACA,MAAM,IAAI,CAAClL,iBAAiB;UAC5B,MAAM,IAAI,CAAC4C,kBAAkB,EAAE;;QAGjC,IAAI,IAAI,CAAC1D,gBAAgB,EAAE;UACzB;UACA;UACA,IAAI,CAACoL,iBAAiB,EAAE;;OAE3B,MAAM,IAAIa,QAAQ,CAACC,eAAe,KAAK,QAAQ,EAAE;QAChD,IAAI,IAAI,CAAClM,gBAAgB,EAAE;UACzB,IAAI,CAACqL,gBAAgB,EAAE;;;IAG7B,CAAC;;EAED;;;;;;EAMQf,kBAAkBA,CACxBvF,QAAkB,EAClBvE,OAIC;IAED,MAAM2L,SAAS,GAAa,CAAC,YAAYC,kBAAkB,CAACrH,QAAQ,CAAC,EAAE,CAAC;IACxE,IAAIvE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEyD,UAAU,EAAE;MACvBkI,SAAS,CAACE,IAAI,CAAC,eAAeD,kBAAkB,CAAC5L,OAAO,CAACyD,UAAU,CAAC,EAAE,CAAC;;IAEzE,IAAIzD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwE,MAAM,EAAE;MACnBmH,SAAS,CAACE,IAAI,CAAC,UAAUD,kBAAkB,CAAC5L,OAAO,CAACwE,MAAM,CAAC,EAAE,CAAC;;IAEhE,IAAIxE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEyE,WAAW,EAAE;MACxB,MAAMqH,KAAK,GAAG,IAAIC,eAAe,CAAC/L,OAAO,CAACyE,WAAW,CAAC;MACtDkH,SAAS,CAACE,IAAI,CAACC,KAAK,CAACE,QAAQ,EAAE,CAAC;;IAElC,OAAO,GAAG,IAAI,CAAC1M,GAAG,cAAcqM,SAAS,CAACM,IAAI,CAAC,GAAG,CAAC,EAAE;EACvD;EAEc3K,SAASA,CAACgE,MAAyB;;;MAC/C,IAAI;QACF,MAAM;UAAE9C,IAAI,EAAEuE,WAAW;UAAE5E,KAAK,EAAE6E;QAAY,CAAE,GAAG,MAAM,IAAI,CAACjB,UAAU,EAAE;QAC1E,IAAIiB,YAAY,EAAE;UAChB,OAAO;YAAExE,IAAI,EAAE,IAAI;YAAEL,KAAK,EAAE6E;UAAY,CAAE;;QAG5C,OAAO,MAAM5I,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,CAACxB,GAAG,YAAYgG,MAAM,CAAC4G,QAAQ,EAAE,EAAE;UACpFvM,OAAO,EAAE,IAAI,CAACA,OAAO;UACrB+G,GAAG,EAAE,CAAAtE,EAAA,GAAA2E,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEtE,OAAO,cAAAL,EAAA,uBAAAA,EAAA,CAAEmD;SAC5B,CAAC;OACH,CAAC,OAAOpD,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE,IAAI;YAAEL;UAAK,CAAE;;QAE9B,MAAMA,KAAK;;;;EAIf;;;EAGcf,OAAOA,CAACkE,MAAuB;;;MAC3C,IAAI;QACF,MAAM;UAAE9C,IAAI,EAAEuE,WAAW;UAAE5E,KAAK,EAAE6E;QAAY,CAAE,GAAG,MAAM,IAAI,CAACjB,UAAU,EAAE;QAC1E,IAAIiB,YAAY,EAAE;UAChB,OAAO;YAAExE,IAAI,EAAE,IAAI;YAAEL,KAAK,EAAE6E;UAAY,CAAE;;QAG5C,MAAM;UAAExE,IAAI;UAAEL;QAAK,CAAE,GAAG,MAAM/D,QAAQ,CAAC,IAAI,CAAC0C,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAACxB,GAAG,UAAU,EAAE;UAChFqE,IAAI,EAAE;YACJwI,aAAa,EAAE7G,MAAM,CAAC8G,YAAY;YAClCC,WAAW,EAAE/G,MAAM,CAACgH,UAAU;YAC9BC,MAAM,EAAEjH,MAAM,CAACiH;WAChB;UACD5M,OAAO,EAAE,IAAI,CAACA,OAAO;UACrB+G,GAAG,EAAE,CAAAtE,EAAA,GAAA2E,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEtE,OAAO,cAAAL,EAAA,uBAAAA,EAAA,CAAEmD;SAC5B,CAAC;QAEF,IAAIpD,KAAK,EAAE;UACT,OAAO;YAAEK,IAAI,EAAE,IAAI;YAAEL;UAAK,CAAE;;QAG9B,IAAI,CAAA8B,EAAA,GAAAzB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgK,IAAI,cAAAvI,EAAA,uBAAAA,EAAA,CAAEwI,OAAO,EAAE;UACvBjK,IAAI,CAACgK,IAAI,CAACC,OAAO,GAAG,4BAA4BjK,IAAI,CAACgK,IAAI,CAACC,OAAO,EAAE;;QAGrE,OAAO;UAAEjK,IAAI;UAAEL,KAAK,EAAE;QAAI,CAAE;OAC7B,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE,IAAI;YAAEL;UAAK,CAAE;;QAE9B,MAAMA,KAAK;;;;EAIf;;;EAGclB,OAAOA,CAACqE,MAAuB;;;MAC3C,IAAI;QACF,MAAM;UAAE9C,IAAI,EAAEuE,WAAW;UAAE5E,KAAK,EAAE6E;QAAY,CAAE,GAAG,MAAM,IAAI,CAACjB,UAAU,EAAE;QAC1E,IAAIiB,YAAY,EAAE;UAChB,OAAO;YAAExE,IAAI,EAAE,IAAI;YAAEL,KAAK,EAAE6E;UAAY,CAAE;;QAG5C,MAAM;UAAExE,IAAI;UAAEL;QAAK,CAAE,GAAG,MAAM/D,QAAQ,CACpC,IAAI,CAAC0C,KAAK,EACV,MAAM,EACN,GAAG,IAAI,CAACxB,GAAG,YAAYgG,MAAM,CAAC4G,QAAQ,SAAS,EAC/C;UACEvI,IAAI,EAAE;YAAEmE,IAAI,EAAExC,MAAM,CAACwC,IAAI;YAAE4E,YAAY,EAAEpH,MAAM,CAACqH;UAAW,CAAE;UAC7DhN,OAAO,EAAE,IAAI,CAACA,OAAO;UACrB+G,GAAG,EAAE,CAAAtE,EAAA,GAAA2E,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEtE,OAAO,cAAAL,EAAA,uBAAAA,EAAA,CAAEmD;SAC5B,CACF;QACD,IAAIpD,KAAK,EAAE;UACT,OAAO;YAAEK,IAAI,EAAE,IAAI;YAAEL;UAAK,CAAE;;QAG9B,MAAM,IAAI,CAACa,YAAY,CAAAvC,MAAA,CAAAC,MAAA;UACrB0F,UAAU,EAAE6B,IAAI,CAACC,KAAK,CAAC7B,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG9D,IAAI,CAACkF;QAAU,GACxDlF,IAAI,EACP;QACF,IAAI,CAACD,qBAAqB,CAAC,wBAAwB,EAAEC,IAAI,CAAC;QAE1D,OAAO;UAAEA,IAAI;UAAEL;QAAK,CAAE;OACvB,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE,IAAI;YAAEL;UAAK,CAAE;;QAE9B,MAAMA,KAAK;;;;EAIf;;;EAGcX,UAAUA,CAAC8D,MAA0B;;;MACjD,IAAI;QACF,MAAM;UAAE9C,IAAI,EAAEuE,WAAW;UAAE5E,KAAK,EAAE6E;QAAY,CAAE,GAAG,MAAM,IAAI,CAACjB,UAAU,EAAE;QAC1E,IAAIiB,YAAY,EAAE;UAChB,OAAO;YAAExE,IAAI,EAAE,IAAI;YAAEL,KAAK,EAAE6E;UAAY,CAAE;;QAG5C,OAAO,MAAM5I,QAAQ,CACnB,IAAI,CAAC0C,KAAK,EACV,MAAM,EACN,GAAG,IAAI,CAACxB,GAAG,YAAYgG,MAAM,CAAC4G,QAAQ,YAAY,EAClD;UACEvM,OAAO,EAAE,IAAI,CAACA,OAAO;UACrB+G,GAAG,EAAE,CAAAtE,EAAA,GAAA2E,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEtE,OAAO,cAAAL,EAAA,uBAAAA,EAAA,CAAEmD;SAC5B,CACF;OACF,CAAC,OAAOpD,KAAK,EAAE;QACd,IAAIhE,WAAW,CAACgE,KAAK,CAAC,EAAE;UACtB,OAAO;YAAEK,IAAI,EAAE,IAAI;YAAEL;UAAK,CAAE;;QAE9B,MAAMA,KAAK;;;;EAIf;;;EAGcP,mBAAmBA,CAC/B0D,MAAmC;;MAEnC,MAAM;QAAE9C,IAAI,EAAEoK,aAAa;QAAEzK,KAAK,EAAE0K;MAAc,CAAE,GAAG,MAAM,IAAI,CAACrL,UAAU,CAAC;QAC3E0K,QAAQ,EAAE5G,MAAM,CAAC4G;OAClB,CAAC;MACF,IAAIW,cAAc,EAAE;QAClB,OAAO;UAAErK,IAAI,EAAE,IAAI;UAAEL,KAAK,EAAE0K;QAAc,CAAE;;MAE9C,OAAO,MAAM,IAAI,CAAC5L,OAAO,CAAC;QACxBiL,QAAQ,EAAE5G,MAAM,CAAC4G,QAAQ;QACzBS,WAAW,EAAEC,aAAa,CAAC/D,EAAE;QAC7Bf,IAAI,EAAExC,MAAM,CAACwC;OACd,CAAC;IACJ,CAAC;;EAED;;;EAGcpG,YAAYA,CAAA;;MACxB,MAAM;QACJc,IAAI,EAAE;UAAE0B;QAAI,CAAE;QACd/B,KAAK,EAAE8E;MAAS,CACjB,GAAG,MAAM,IAAI,CAACR,OAAO,EAAE;MACxB,IAAIQ,SAAS,EAAE;QACb,OAAO;UAAEzE,IAAI,EAAE,IAAI;UAAEL,KAAK,EAAE8E;QAAS,CAAE;;MAGzC,MAAM6F,OAAO,GAAG,CAAA5I,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE4I,OAAO,KAAI,EAAE;MACnC,MAAMN,IAAI,GAAGM,OAAO,CAACC,MAAM,CACxBC,MAAM,IAAKA,MAAM,CAACX,WAAW,KAAK,MAAM,IAAIW,MAAM,CAACtE,MAAM,KAAK,UAAU,CAC1E;MAED,OAAO;QACLlG,IAAI,EAAE;UACJyK,GAAG,EAAEH,OAAO;UACZN;SACD;QACDrK,KAAK,EAAE;OACR;IACH,CAAC;;EAED;;;EAGcL,+BAA+BA,CAAA;;;MAC3C,MAAM;QACJU,IAAI,EAAE;UAAEC;QAAO,CAAE;QACjBN,KAAK,EAAE6E;MAAY,CACpB,GAAG,MAAM,IAAI,CAACjB,UAAU,EAAE;MAC3B,IAAIiB,YAAY,EAAE;QAChB,OAAO;UAAExE,IAAI,EAAE,IAAI;UAAEL,KAAK,EAAE6E;QAAY,CAAE;;MAE5C,IAAI,CAACvE,OAAO,EAAE;QACZ,OAAO;UACLD,IAAI,EAAE;YAAE0K,YAAY,EAAE,IAAI;YAAEC,SAAS,EAAE,IAAI;YAAEC,4BAA4B,EAAE;UAAE,CAAE;UAC/EjL,KAAK,EAAE;SACR;;MAGH,MAAMmF,OAAO,GAAG,IAAI,CAACJ,UAAU,CAACzE,OAAO,CAAC8C,YAAY,CAAC;MAErD,IAAI2H,YAAY,GAAwC,IAAI;MAE5D,IAAI5F,OAAO,CAAC+F,GAAG,EAAE;QACfH,YAAY,GAAG5F,OAAO,CAAC+F,GAAG;;MAG5B,IAAIF,SAAS,GAAwCD,YAAY;MAEjE,MAAMI,eAAe,GACnB,CAAArJ,EAAA,IAAA7B,EAAA,GAAAK,OAAO,CAACyB,IAAI,CAAC4I,OAAO,cAAA1K,EAAA,uBAAAA,EAAA,CAAE2K,MAAM,CAAEC,MAAc,IAAKA,MAAM,CAACtE,MAAM,KAAK,UAAU,CAAC,cAAAzE,EAAA,cAAAA,EAAA,GAAI,EAAE;MAEtF,IAAIqJ,eAAe,CAACxG,MAAM,GAAG,CAAC,EAAE;QAC9BqG,SAAS,GAAG,MAAM;;MAGpB,MAAMC,4BAA4B,GAAG9F,OAAO,CAACiG,GAAG,IAAI,EAAE;MAEtD,OAAO;QAAE/K,IAAI,EAAE;UAAE0K,YAAY;UAAEC,SAAS;UAAEC;QAA4B,CAAE;QAAEjL,KAAK,EAAE;MAAI,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}